{
	"info": {
		"_postman_id": "f86e78b6-85bb-4d15-bec8-bf1f785863f4",
		"name": "FlowVIt.Mobile API v2.0",
		"description": "> Блок переменных \"*Variables*\" содержит статические и динамические значения, необходимые для универсализации выполнения запросов и тестов.\n\nОписание переменных:\n\n*   **baseURL** – содержит составной endpoint - адрес сервера, к которому осуществляются запросы.\n*   **response_time** – содержит эталонное значение максимального времени ответа сервера (в мс). Время ответа сервера на запрос должно быть менее данного значения.\n*   **report_id** – содержит динамическое значение с  \n    текущим номером отчета, присваиваемым в момент генерации (блок тестов проверки  \n    создания и чтения созданных отчетов).\n*   **filepath** – содержит динамический путь к файлу изображения, необходимому для тестирования  \n    функции установки пользовательского аватара.  \n    Принцип работы данной переменной заключается в том, что в POST-запросе «*Upload user profile photo», на вкладке Body в переменной profileImage отправляемых параметров form-data указывается файл без расширения, с именем {{filepath}}* – таким образом открывается возможность в Postman использовать данный файл как переменную, следовательно, позволяет управлять динамически содержимым через код теста.\n*   **ava** – содержит статический путь к файлу изображения, необходимому для тестирования  \n    функции установки пользовательского аватара*. Вводится пользователем вручную, перед началом тестов. Файл изображения должен располагаться в корне рабочей директории (Working directory* в настройках Postman, это необходимо для правильного функционирования коллекции при запуске в newman для Workflow на Github), поэтому переменная содержит просто название файла (например galen.png).\n*   **hashB** – содержит статическое значение хэша изображения пользовательского аватара (вычисляется один раз встроенной функцией Postman *CryptoJS.MD5()*). Значение хэша в данной переменной необходимо как эталонное для сравнения со значением хэша полученного изображения, после проведения операции по удалению и загрузке нового пользовательского аватара.\n*   **start** – содержит динамическое значение «текущей» даты в значении «от» в диапазоне дат создания отчетов.\n*   **end** – содержит динамическое значение «текущей» даты в значении «до» в диапазоне создания отчетов.\n*   **currData** – содержит динамическое эталонное значение «текущего» поля данных профиля пользователя для каждой новой итерации цикла, осуществляющего проход по массиву значений полей данных профиля пользователя, для осуществления сверки с полученными значениями от сервера.\n*   **profileData** – содержит статическое эталонное значение массива полей данных профиля пользователя, который смещается «влево» с каждой итерацией, с целью осуществления прохода по всем полям данных профиля и сверки с полученными значениями от сервера.\n*   **currObtainedData** – содержит полученное от сервера динамическое значение «текущего» поля данных профиля пользователя для каждой новой итерации цикла, осуществляющего проход по массиву значений полей данных профиля пользователя, для осуществления сверки с эталонным значением.\n*   **obtainedData** – содержит полученное от сервера статическое значение массива полей данных профиля пользователя, который смещается «влево» с каждой итерацией, с целью осуществления прохода по всем полям данных профиля и сверки с эталонными значениями.\n*   **phone** – содержит статическое значение номера телефона пользователя.\n*   **code** – содержит статическое значение кода авторизации от SMS-сервиса, для получения токена.\n*   **token_access** – содержит динамическое значение токена авторизации, генерируемое в разделе «*Pre-request Script*» всякий раз, когда происходит выполнение какого-либо запроса.\n*   **port** - содержит статическое значение порта endpoint - сервера, к которому осуществляются запросы.\n*   **protocol** - содержит статическое значение протокола endpoint - сервера, к которому осуществляются запросы.\n*   **version** - содержит статическое значение версии API endpoint - сервера, к которому осуществляются запросы.\n*   **endpoint** - содержит статическое значение адреса endpoint - сервера, к которому осуществляются запросы.\n*   **avatar** - содержит динамический точный адрес аватарки пользователя, полученный GET-запросом для проверки и валидации.\n*   **id_template** - содержит динамическое значение текущего id шаблона. Используется в потоке проверки создания новых тестов.\n*   **currdatetime** - текущая дата и время.\n*   **subscription** \\- содержит номер подписочного плана для валидации содержимого JWT.",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "API",
			"item": [
				{
					"name": "Authorization",
					"item": [
						{
							"name": "Request OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16c0b297-4466-404d-92c3-76533aa086db",
										"exec": [
											"try {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
											"    pm.test(`PASS: Request OTP - Request time is: ${pm.response.responseTime} ms`, () => true);\r",
											"    console.log(`PASS: Request OTP - Server response time is ${pm.response.responseTime} ms`);\r",
											"}\r",
											"catch(e) {\r",
											"    pm.test(`FAIL: Request OTP - Request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
											"    console.log(`FAIL: Request OTP - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
											"}\r",
											"\r",
											"try {\r",
											"    pm.expect(pm.response.to.have.status(200));\r",
											"    pm.test(`PASS: Request OTP - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
											"    console.log(`PASS: Request OTP - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
											"}\r",
											"catch(e) {\r",
											"    pm.test(`FAIL: Request OTP - Server response status is: ${pm.response.code} ${pm.response.status} (must be 200 OK)`, () => {throw new Error(e.message)});\r",
											"    console.log(`FAIL: Request OTP - Server response status is ${pm.response.code} ${pm.response.status} (must be 200 OK)`);\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8f2ba7d5-9e79-4888-a410-6c920560c549",
										"exec": [
											"console.log(\"Testing requesting OTP...\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e4aa98f1-17db-4513-8103-3e6343ff5a0e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/auth/phone/?phone={{phone}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"auth",
										"phone",
										""
									],
									"query": [
										{
											"key": "phone",
											"value": "{{phone}}"
										}
									]
								},
								"description": "GET-запрос **Request OTP** с параметром *phone.*\n\nПараметр *phone* содержит номер телефона, на который будет выслано СМС с кодом подтверждения для регистрации в приложении и получения access_token."
							},
							"response": []
						},
						{
							"name": "Confirm OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0dd0ccdb-9ba4-42cc-9997-9f095a4ab1ca",
										"exec": [
											"try {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
											"    pm.test(`PASS: Confirm OTP - Request time is: ${pm.response.responseTime} ms`, () => true);\r",
											"    console.log(`PASS: Confirm OTP - Server response time is ${pm.response.responseTime} ms`);\r",
											"}\r",
											"catch(e) {\r",
											"    pm.test(`FAIL: Confirm OTP - Request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
											"    console.log(`FAIL: Confirm OTP - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
											"}\r",
											"\r",
											"try {\r",
											"    pm.expect(pm.response.to.have.status(200));\r",
											"    pm.test(`PASS: Confirm OTP - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
											"    console.log(`PASS: Confirm OTP - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
											"}\r",
											"catch(e) {\r",
											"    pm.test(`FAIL: Confirm OTP - Server response status is: ${pm.response.code} ${pm.response.status} (must be 200 OK)`, () => {throw new Error(e.message)});\r",
											"    console.log(`FAIL: Confirm OTP - Server response status is ${pm.response.code} ${pm.response.status} (must be 200 OK)`);\r",
											"}\r",
											"\r",
											"var bodyData = JSON.parse(responseBody);\r",
											"var access_token = bodyData.access_token;\r",
											"pm.collectionVariables.set(\"token_access\", access_token);\r",
											"\r",
											"function parseJWT(token, part) {\r",
											"    var base64URL = token.split('.')[part];\r",
											"    var words = CryptoJS.enc.Base64.parse(base64URL);\r",
											"    var jsonPayload = CryptoJS.enc.Utf8.stringify(words);\r",
											"    return JSON.parse(jsonPayload);\r",
											"};\r",
											"\r",
											"var JWTInfo = {};\r",
											"JWTInfo.size = bodyData.access_token.length;\r",
											"JWTInfo.header = parseJWT(bodyData.access_token, 0);\r",
											"JWTInfo.payload = parseJWT(bodyData.access_token, 1);\r",
											"JWTInfo.signature = bodyData.access_token.split('.')[2];\r",
											"JWTInfo.expires = ((JWTInfo.payload.exp-Date.now().valueOf()/1000)/60).toFixed(1);\r",
											"console.log(JWTInfo);\r",
											"\r",
											"var template = `\r",
											"<b>JWT  Size:{{response.size}}Bytes. Expires in {{response.expires}} minutes</b><br>\r",
											"<b>Header </b>\r",
											"    <table>\r",
											"        <tr><th>Property</th><th>Value</th></tr>\r",
											"        {{#each response.header}}\r",
											"            <tr><td>{{@key}}</td><td>{{.}}</td></tr>\r",
											"        {{/each}}\r",
											"    </table>\r",
											"<b>Payload</b>\r",
											"    <table>\r",
											"        <tr><th>Property</th><th>Value</th></tr>\r",
											"        {{#each response.payload}}\r",
											"            <tr><td>{{@key}}</td><td>{{.}}</td></tr>\r",
											"        {{/each}}\r",
											"    </table>\r",
											" <b>Claims</b>\r",
											"    <table bgcolor=\"#FFFFFF\">\r",
											"        <tr><th>Claim</th><th>Value</th></tr>\r",
											"        {{#each response.payload.Claims}}\r",
											"            <tr>\r",
											"                {{#each this}}\r",
											"                    <td>{{.}}</td>       \r",
											"                {{/each}}\r",
											"            </tr>\r",
											"        {{/each}}\r",
											"    </table>\r",
											"  <i>signature:{{response.signature}}</i>\r",
											"`;\r",
											"pm.visualizer.set(template, {response: JWTInfo});\r",
											"\r",
											"try {\r",
											"    pm.expect(JWTInfo.payload.plan).to.eql(Number(pm.collectionVariables.get(\"subscription\")));\r",
											"    pm.test(`PASS: Confirm OTP - Subscription plan is valid`, () => true);\r",
											"    console.log(`PASS: Confirm OTP - Subscription plan is valid`);\r",
											"}\r",
											"catch(e) {\r",
											"    pm.test(`FAIL: Confirm OTP - Subscription plan is invalid (Must be \"${JWTInfo.payload.plan}\")`, () => {throw new Error(e.message)});\r",
											"    console.log(`FAIL: Confirm OTP - Subscription plan is invalid (Must be \"${JWTInfo.payload.plan}\")`);\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a37ed0df-7226-4ed6-90de-c6b4b3916822",
										"exec": [
											"console.log(\"Testing requesting OTP...\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "38d42d42-2257-465e-aca1-73db27f93ba5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{baseURL}}/auth/phone/?phone={{phone}}&code={{code}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"auth",
										"phone",
										""
									],
									"query": [
										{
											"key": "phone",
											"value": "{{phone}}"
										},
										{
											"key": "code",
											"value": "{{code}}"
										}
									]
								},
								"description": "PUT-запрос **Confirm OTP** с параметром *phone.*\n\nПараметр *phone* содержит номер телефона, на который было выслано СМС с кодом подтверждения для регистрации в приложении и получения access token.\n\nПараметр *code* содержит код из СМС, для аутентификации (по умолчанию для нужд тестирования код 1111)."
							},
							"response": []
						},
						{
							"name": "Check-in",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));",
											"    pm.test(`PASS: Check-in - Request time is: ${pm.response.responseTime} ms`, () => true);",
											"    console.log(`PASS: Check-in - Server response time is ${pm.response.responseTime} ms`);",
											"}",
											"catch(e) {",
											"    pm.test(`FAIL: Check-in - Request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});",
											"    console.log(`FAIL: Check-in - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);",
											"}",
											"",
											"try {",
											"    pm.expect(pm.response.to.have.status(201));",
											"    pm.test(`PASS: Check-in - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);",
											"    console.log(`PASS: Check-in - Server response status is ${pm.response.code} ${pm.response.status}`);",
											"}",
											"catch(e) {",
											"    pm.test(`FAIL: Check-in - Server response status is: ${pm.response.code} ${pm.response.status} (must be 201 OK)`, () => {throw new Error(e.message)});",
											"    console.log(`FAIL: Check-in - Server response status is ${pm.response.code} ${pm.response.status} (must be 201 OK)`);",
											"}"
										],
										"type": "text/javascript",
										"id": "54eae0d0-97b7-4fec-8f56-cc7c23f317da"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"Testing check-in...\");"
										],
										"type": "text/javascript",
										"id": "831b81e8-8926-4096-b7c1-6afe388c49ed"
									}
								}
							],
							"id": "c94c438d-1cc0-4ca4-ae25-08bae82b351f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": "{{baseURL}}/auth/checkin/",
								"description": "POST-запрос **Check-in** - осуществляет чек-ин (отметку приложением о последней авторизации в виде timestamp, который отображается в поле *last_login_time* профиля пользователя)."
							},
							"response": []
						},
						{
							"name": "Refresh token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"Testing refreshing token...\");"
										],
										"type": "text/javascript",
										"id": "df779945-cb2c-4bac-9a41-6a533a9e474e"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
											"    pm.test(`PASS: Refreshing token - Request time is: ${pm.response.responseTime} ms`, () => true);\r",
											"    console.log(`PASS: Refreshing token - Server response time is ${pm.response.responseTime} ms`);\r",
											"}\r",
											"catch(e) {\r",
											"    pm.test(`FAIL: Refreshing token - Request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
											"    console.log(`FAIL: Refreshing token - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
											"}\r",
											"\r",
											"try {\r",
											"    pm.expect(pm.response.to.have.status(200));\r",
											"    pm.test(`PASS: Refreshing token - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
											"    console.log(`PASS: Refreshing token - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
											"}\r",
											"catch(e) {\r",
											"    pm.test(`FAIL: Refreshing token - Server response status is: ${pm.response.code} ${pm.response.status} (must be 200 OK)`, () => {throw new Error(e.message)});\r",
											"    console.log(`FAIL: Refreshing token - Server response status is ${pm.response.code} ${pm.response.status} (must be 200 OK)`);\r",
											"}\r",
											"\r",
											"var bodyData = JSON.parse(responseBody);\r",
											"var access_token = bodyData.access_token;\r",
											"\r",
											"try {\r",
											"    pm.expect(pm.response.access_token).not.eql(pm.collectionVariables.get(\"token_access\"));\r",
											"    pm.test(`PASS: Refreshing token - Token refreshed successfully`, () => true);\r",
											"    console.log(`PASS: Refreshing token - Token refreshed successfully`);\r",
											"}\r",
											"catch(e) {\r",
											"    pm.test(`FAIL: Refreshing token - Token has not been refreshed!`, () => {throw new Error(e.message)});\r",
											"    console.log(`FAIL: Refreshing token - Token has not been refreshed!`);\r",
											"}\r",
											"\r",
											"function parseJWT(token, part) {\r",
											"    var base64URL = token.split('.')[part];\r",
											"    var words = CryptoJS.enc.Base64.parse(base64URL);\r",
											"    var jsonPayload = CryptoJS.enc.Utf8.stringify(words);\r",
											"    return JSON.parse(jsonPayload);\r",
											"};\r",
											"\r",
											"var JWTInfo = {};\r",
											"JWTInfo.size = bodyData.access_token.length;\r",
											"JWTInfo.header = parseJWT(bodyData.access_token, 0);\r",
											"JWTInfo.payload = parseJWT(bodyData.access_token, 1);\r",
											"JWTInfo.signature = bodyData.access_token.split('.')[2];\r",
											"JWTInfo.expires = ((JWTInfo.payload.exp-Date.now().valueOf()/1000)/60).toFixed(1);\r",
											"console.log(JWTInfo);\r",
											"\r",
											"var template = `\r",
											"<b>JWT  Size:{{response.size}}Bytes. Expires in {{response.expires}} minutes</b><br>\r",
											"<b>Header </b>\r",
											"    <table>\r",
											"        <tr><th>Property</th><th>Value</th></tr>\r",
											"        {{#each response.header}}\r",
											"            <tr><td>{{@key}}</td><td>{{.}}</td></tr>\r",
											"        {{/each}}\r",
											"    </table>\r",
											"<b>Payload</b>\r",
											"    <table>\r",
											"        <tr><th>Property</th><th>Value</th></tr>\r",
											"        {{#each response.payload}}\r",
											"            <tr><td>{{@key}}</td><td>{{.}}</td></tr>\r",
											"        {{/each}}\r",
											"    </table>\r",
											" <b>Claims</b>\r",
											"    <table bgcolor=\"#FFFFFF\">\r",
											"        <tr><th>Claim</th><th>Value</th></tr>\r",
											"        {{#each response.payload.Claims}}\r",
											"            <tr>\r",
											"                {{#each this}}\r",
											"                    <td>{{.}}</td>       \r",
											"                {{/each}}\r",
											"            </tr>\r",
											"        {{/each}}\r",
											"    </table>\r",
											"  <i>signature:{{response.signature}}</i>\r",
											"`;\r",
											"pm.visualizer.set(template, {response: JWTInfo});\r",
											"\r",
											"try {\r",
											"    pm.expect(JWTInfo.payload.plan).to.eql(Number(pm.collectionVariables.get(\"subscription\")));\r",
											"    pm.test(`PASS: Refreshing token - Subscription plan is valid`, () => true);\r",
											"    console.log(`PASS: Refreshing token - Subscription plan is valid`);\r",
											"}\r",
											"catch(e) {\r",
											"    pm.test(`FAIL: Refreshing token - Subscription plan is invalid (Must be \"${JWTInfo.payload.plan}\")`, () => {throw new Error(e.message)});\r",
											"    console.log(`FAIL: Refreshing token - Subscription plan is invalid (Must be \"${JWTInfo.payload.plan}\")`);\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"token_access\", access_token);\r",
											"console.log(\"Token refreshed!\");"
										],
										"type": "text/javascript",
										"id": "7a6d8e23-3316-4acc-969d-6630e38e4008"
									}
								}
							],
							"id": "6704528e-a998-4898-a924-034ffde8e6ac",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": "{{baseURL}}/auth/refresh",
								"description": "POST-запрос **Refresh token** - осуществляет обновление текущего токена и переприсваевает полученное значение в переменной *token_access*."
							},
							"response": []
						}
					],
					"id": "32fe3e49-3407-4368-a0f8-0b2d73f1e415",
					"description": "> Набор запросов для тестирования авторизации.\n\n*   **Request OTP** - запрашивает четырёхзначный код в СМС по номеру телефона.\n*   **Confirm OTP** - осуществляет авторизацию пользователя путем сопоставления полученного OTP с ожидаемым значением.\n*   **Check-in** - осуществляет чек-ин (отметку приложением о последней авторизации в виде timestamp, который отображается в поле *last_login_time* профиля пользователя).\n*   **Refresh token** - осуществляет обновление текущего токена и переприсваевает полученное значение в переменной *token_access*.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "352a10ff-7840-4d4b-8327-b06946af3615"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "5dcb2bd8-dd02-412f-9bec-d551c6053085"
							}
						}
					]
				},
				{
					"name": "User profile",
					"item": [
						{
							"name": "Create user profile",
							"item": [
								{
									"name": "Сompleting user profile data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
													"    pm.test(`PASS: Сompleting user profile data - Request time is: ${pm.response.responseTime} ms`, () => true);\r",
													"    console.log(`PASS: Сompleting user profile data - Server response time is ${pm.response.responseTime} ms`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Сompleting user profile data - Request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Сompleting user profile data - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.to.have.status(201));\r",
													"    pm.test(`PASS: Сompleting user profile data - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
													"    console.log(`PASS: Сompleting user profile data - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Сompleting user profile data - Server response status is: ${pm.response.code} ${pm.response.status} (must be 201 OK)`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Сompleting user profile data - Server response status is ${pm.response.code} ${pm.response.status} (must be 201 OK)`);\r",
													"}"
												],
												"type": "text/javascript",
												"id": "f123a62b-e092-4665-8499-5b694177c3fd"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Testing of completing user profile data...\");"
												],
												"type": "text/javascript",
												"id": "26f5dcab-d345-4e44-9683-3a21fed01df8"
											}
										}
									],
									"id": "b578c777-308c-4556-baea-e6d5cca7baaf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": 10,\r\n    \"login\": \"79378839459\",\r\n    \"name\": \"Vladislav\",\r\n    \"surname\": \"Makashov\",\r\n    \"patronymic\": \"Igorevich\",\r\n    \"sex\":\"1\",\r\n    \"birthday\": \"1992-02-01\",\r\n    \"address\": {\r\n        \"id_address\": 10,\r\n        \"postcode\": \"432031\",\r\n        \"country\": \"RU\",\r\n        \"state\": \"Ulyanovsk\",\r\n        \"city\": \"Ulyanovsk\",\r\n        \"address1\": \"Lelingradskaya 32\",\r\n        \"address2\": \"build 2, room 114\",\r\n        \"comment\": \"this is comment\"\r\n    },\r\n    \"phone\": \"+79378839459\",\r\n    \"email\": \"makashov.v@it-galen.com\",\r\n    \"email_verified_at\": \"2022-04-28T09:31:20\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/user",
										"description": "PUT-запрос **Completing user profile data**.\n\nОтсылает на сервер набор данных в поля профиля пользователя.\n\nПередаваемые параметры представляют собой JSON-схему.\n\n``` json\n{\n    \"id\": 10,\n    \"login\": \"79378839459\",\n    \"name\": \"Vladislav\",\n    \"surname\": \"Makashov\",\n    \"patronymic\": \"Igorevich\",\n    \"sex\":\"1\",\n    \"birthday\": \"1992-02-01\",\n    \"address\": {\n        \"id_address\": 10,\n        \"postcode\": \"432031\",\n        \"country\": \"RU\",\n        \"state\": \"Ulyanovsk\",\n        \"city\": \"Ulyanovsk\",\n        \"address1\": \"Lelingradskaya 32\",\n        \"address2\": \"build 2, room 114\",\n        \"comment\": \"this is comment\"\n    },\n    \"phone\": \"+79378839459\",\n    \"email\": \"makashov.v@it-galen.com\",\n    \"email_verified_at\": \"2022-04-28T09:31:20\"\n}\n\n```"
									},
									"response": []
								},
								{
									"name": "Subscribe user to PRO plan",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
													"    pm.test(`PASS: Subscribe user to PRO plan - Request time is: ${pm.response.responseTime} ms`, () => true);\r",
													"    console.log(`PASS: Subscribe user to PRO plan - Server response time is ${pm.response.responseTime} ms`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Subscribe user to PRO plan - Request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Subscribe user to PRO plan - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.to.have.status(201));\r",
													"    pm.test(`PASS: Subscribe user to PRO plan - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
													"    console.log(`PASS: Subscribe user to PRO plan - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Subscribe user to PRO plan - Server response status is: ${pm.response.code} ${pm.response.status} (must be 201 Created)`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Subscribe user to PRO plan - Server response status is ${pm.response.code} ${pm.response.status} (must be 201 Created)`);\r",
													"}"
												],
												"type": "text/javascript",
												"id": "946d6d58-7354-4d92-b87a-47a089c9336f"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Testing subscription user to PRO plan...\");\r",
													"pm.collectionVariables.set(\"subscription\", 3)"
												],
												"type": "text/javascript",
												"id": "fc89c91e-903c-4358-9919-3ec72026e9e4"
											}
										}
									],
									"id": "21b91753-9e5f-4f37-9c65-99373e25164a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"url": "{{baseURL}}/user/plan/{{subscription}}",
										"description": "POST-запрос **Subscribe user to PRO plan.**\n\nОсуществляет подписку пользователя на тарифный план PRO."
									},
									"response": []
								}
							],
							"id": "7647b521-db85-4a1b-8e83-850c541c8c3f",
							"description": "> Набор запросов для наполнения профиля пользователя тестовыми данными\n\n**Completing user profile data** - осуществляет заполнение профиля пользователя данными."
						},
						{
							"name": "Read user profile",
							"item": [
								{
									"name": "Obtain user profile data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"required\": [\"id\", \"login\", \"name\", \"surname\", \"patronymic\", \"sex\", \"birthday\", \"address\", \"phone\", \"email\", \"last_login_time\", \"email_verified_at\",  \"last_ip\", \"last_ip_geo\", \"opd\", \"photo\"],\r",
													"    \"properties\": {\r",
													"        \"id\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"login\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"name\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"surname\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"patronymic\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"sex\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"birthday\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"address\": {\r",
													"            \"type\": \"object\",\r",
													"            \"required\": [\"id\", \"postcode\", \"country\", \"state\", \"city\", \"address1\", \"address2\", \"comment\"],\r",
													"            \"properties\": {\r",
													"                \"id\": {\r",
													"                    \"type\": \"number\"\r",
													"                },\r",
													"                \"postcode\": {\r",
													"                    \"type\": \"number\"\r",
													"                },\r",
													"                \"country\": {\r",
													"                    \"type\": \"string\"\r",
													"                },\r",
													"                \"state\": {\r",
													"                    \"type\": \"string\"\r",
													"                },\r",
													"                \"city\": {\r",
													"                    \"type\": \"string\"\r",
													"                },\r",
													"                \"address1\": {\r",
													"                    \"type\": \"string\"\r",
													"                },\r",
													"                \"address2\": {\r",
													"                    \"type\": \"string\"\r",
													"                },\r",
													"                \"comment\": {\r",
													"                    \"type\": \"string\"\r",
													"                },\r",
													"            }\r",
													"        },\r",
													"        \"phone\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"email\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"last_login_time\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"email_verified_at\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"last_ip\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"last_ip_geo\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"opd\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"photo\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    }\r",
													"};\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
													"    pm.test(`PASS: Obtaining of user profile data - Request time is: ${pm.response.responseTime} ms`, () => true);\r",
													"    console.log(`PASS: Obtaining of user profile data - Server response time is ${pm.response.responseTime} ms`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of user profile data - Request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of user profile data - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.to.have.status(200));\r",
													"    pm.test(`PASS: Obtaining of user profile data - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
													"    console.log(`PASS: Obtaining of user profile data - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of user profile data - Server response status is: ${pm.response.code} ${pm.response.status} (must be 200 OK)`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of user profile data - Server response status is ${pm.response.code} ${pm.response.status} (must be 200 OK)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"    pm.test(`PASS: Obtaining of user profile data - JSON schema is valid`, () => true);\r",
													"    console.log(`PASS: Obtaining of user profile data - JSON schema is valid`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of user profile data - JSON schema is not valid`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of user profile data - schema is not valid`);\r",
													"}"
												],
												"type": "text/javascript",
												"id": "0a9733fc-2cae-4a6b-9e25-b27db280a71e"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Testing obtaining of user profile data...\");"
												],
												"type": "text/javascript",
												"id": "65f4d60f-86e1-4f6e-b4af-84ee9de14d55"
											}
										}
									],
									"id": "5924462f-2a11-492d-8ee2-89d85e478b3b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/user",
										"description": "GET-запрос **Obtain user profile data**.\n\nПолучает список данных, хранящихся в профиле пользователя.\n\nПоля данных:\n\n*   *id,*\n*   *login,*\n*   *name,*\n*   *surname,*\n*   *patronymic,*\n*   *sex,*\n*   *birthday,*\n*   *address:*\n    *   *id,*\n    *   *postcode,*\n    *   *country,*\n    *   *state,*\n    *   *city,*\n    *   *address1,*\n    *   *address2,*\n    *   *comment.*\n*   *phone,*\n*   *email,*\n*   *last_login_time,*\n*   *email_verified_at,*\n*   *last_ip,*\n*   *last_ip_geo,*\n*   *opd,*\n*   *photo.*"
									},
									"response": []
								},
								{
									"name": "Obtain user profile photo",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
													"    pm.test(`PASS: Obtaining of user profile photo - Request time is: ${pm.response.responseTime} ms`, () => true);\r",
													"    console.log(`PASS: Obtaining of user profile photo - Server response time is ${pm.response.responseTime} ms`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of user profile photo - Request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of user profile photo - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.to.have.status(200));\r",
													"    pm.test(`PASS: Obtaining of user profile photo - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
													"    console.log(`PASS: Obtaining of user profile photo - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of user profile photo - Server response status is: ${pm.response.code} ${pm.response.status} (must be 200 OK)`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of user profile photo - Server response status is ${pm.response.code} ${pm.response.status} (must be 200 OK)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.be.oneOf(['image/jpeg', 'image/png', '.tiff']);\r",
													"    pm.test(`PASS: Obtain user profile photo - Content-Type is image`, () => true);\r",
													"    console.log(`PASS: Obtain user profile photo - Content-Type is image`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtain user profile photo - Content-Type isn't image`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtain user profile photo - Content-Type isn't image`);\r",
													"}"
												],
												"type": "text/javascript",
												"id": "ca469d3f-7093-4521-93dc-7c33ce0d1acb"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Testing obtaining of user profile photo...\");\r",
													"    let endpoint = pm.collectionVariables.get(\"endpoint\");\r",
													"    let port = pm.collectionVariables.get(\"port\");\r",
													"    let version = pm.collectionVariables.get(\"version\");\r",
													"    let token = pm.collectionVariables.get(\"token_access\")\r",
													"    pm.sendRequest({ \r",
													"        url: `${endpoint}${port}/${version}/user`,\r",
													"        method: 'GET',\r",
													"        auth: {\r",
													"\t\t\ttype: \"bearer\",\r",
													"\t\t\tbearer: [\r",
													"\t\t\t\t{\r",
													"\t\t\t\t\tkey: \"token\",\r",
													"\t\t\t\t\tvalue: token,\r",
													"\t\t\t\t\ttype: \"string\"\r",
													"\t\t\t\t}\r",
													"\t\t\t]\r",
													"\t\t},\r",
													"        header: {\r",
													"            'Accept': 'application/json',\r",
													"            'Content-Type': 'application/json'\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        pm.collectionVariables.set(\"avatar\", res.json().photo);\r",
													"    });\r",
													""
												],
												"type": "text/javascript",
												"id": "3be4a75d-cf57-45bb-99d6-07ffa20e0b83"
											}
										}
									],
									"id": "f0d7f24a-4e00-4d3a-92f7-0161993c66f2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{avatar}}",
										"description": "GET-запрос **Obtain user profile photo**.\n\nПолучает файл пользовательского аватара."
									},
									"response": []
								}
							],
							"id": "da7646da-c0b5-4aba-92c5-9e5b40bc3f1f",
							"description": "> Набор запросов для чтения профиля пользователя\n\n**Obtain user profile data** - запрашивает данные профиля пользователя.\n\n**Obtain user profile photo** - запрашивает файл пользовательского аватара.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "a6a14454-62bf-45e9-bd56-a2cffd306cc6"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "5af068e6-852c-4102-bcfb-42a1704499b2"
									}
								}
							]
						},
						{
							"name": "Update user profile",
							"item": [
								{
									"name": "Upload user profile photo",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
													"    pm.test(`PASS: Uploading user profile photo - Request time is: ${pm.response.responseTime} ms`, () => true);\r",
													"    console.log(`PASS: Uploading user profile photo - Server response time is ${pm.response.responseTime} ms`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Uploading user profile photo - Request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Uploading user profile photo - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.to.have.status(201));\r",
													"    pm.test(`PASS: Uploading user profile photo - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
													"    console.log(`PASS: Uploading user profile photo - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Uploading user profile photo - Server response status is: ${pm.response.code} ${pm.response.status} (must be 201 OK)`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Uploading user profile photo - Server response status is ${pm.response.code} ${pm.response.status} (must be 201 OK)`);\r",
													"}"
												],
												"type": "text/javascript",
												"id": "5c035574-34f5-4cec-a7fb-825058d08645"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Testing uploading of user profile photo...\");\r",
													"const path = pm.collectionVariables.get(\"ava\");\r",
													"pm.collectionVariables.set(\"filepath\", path);"
												],
												"type": "text/javascript",
												"id": "07c96e14-beb4-49d3-b740-0e22869fc7c1"
											}
										}
									],
									"id": "38ac133f-f4ce-4a90-b3a0-439fda9ef063",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {},
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "image",
													"type": "file",
													"src": "{{filepath}}"
												}
											]
										},
										"url": "{{baseURL}}/user/photo",
										"description": "POST-запрос **Upload user profile photo**.\n\nОсуществляет загрузку на сервер файла-изображения пользовательского автара.\n\nПередаваемые параметры:\n\n*   *Image* - путь и наименование передаваемого файла."
									},
									"response": []
								},
								{
									"name": "Updating user profile data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
													"    pm.test(`PASS: Updating user profile data - Request time is: ${pm.response.responseTime} ms`, () => true);\r",
													"    console.log(`PASS: Updating user profile data - Server response time is ${pm.response.responseTime} ms`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Updating user profile data - Request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Updating user profile data - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.to.have.status(201));\r",
													"    pm.test(`PASS: Updating user profile data - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
													"    console.log(`PASS: Updating user profile data - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Updating user profile data - Server response status is: ${pm.response.code} ${pm.response.status} (must be 201 OK)`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Updating user profile data - Server response status is ${pm.response.code} ${pm.response.status} (must be 201 OK)`);\r",
													"}"
												],
												"type": "text/javascript",
												"id": "668de7df-503c-423a-9cdb-2fa9726b0700"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Testing of updating user profile data...\");"
												],
												"type": "text/javascript",
												"id": "b2987ec1-3e61-4b73-b5d3-9af5479f592a"
											}
										}
									],
									"id": "240c5abb-8a56-4d3a-b379-a667166083eb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": 10,\r\n    \"login\": \"79378839459\",\r\n    \"name\": \"Vlad\",\r\n    \"surname\": \"Makashov\",\r\n    \"patronymic\": \"Igorevich\",\r\n    \"sex\":\"1\",\r\n    \"birthday\": \"1992-02-01\",\r\n    \"address\": {\r\n        \"postcode\": 432031,\r\n        \"country\": \"RU\",\r\n        \"state\": \"Ulyanovskaya oblast\",\r\n        \"city\": \"Ulyanovsk\",\r\n        \"address1\": \"Lelingradskaya 32\",\r\n        \"address2\": \"build 2, room 114\",\r\n        \"comment\": \"this is comment\"\r\n    },\r\n    \"phone\": \"+79378839459\",\r\n    \"email\": \"makashov73@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/user",
										"description": "PUT-запрос **Updating user profile data**.\n\nОтсылает на сервер набор данных в поля профиля пользователя.\n\nПередаваемые параметры представляют собой JSON-схему.\n\n``` json\n{\n    \"id\": 10,\n    \"login\": \"79378839459\",\n    \"name\": \"Vlad\",\n    \"surname\": \"Makashov\",\n    \"patronymic\": \"Igorevich\",\n    \"sex\":\"1\",\n    \"birthday\": \"1992-02-01\",\n    \"address\": {\n        \"postcode\": 432031,\n        \"country\": \"RU\",\n        \"state\": \"Ulyanovskaya oblast\",\n        \"city\": \"Ulyanovsk\",\n        \"address1\": \"Lelingradskaya 32\",\n        \"address2\": \"build 2, room 114\",\n        \"comment\": \"this is comment\"\n    },\n    \"phone\": \"+79378839459\",\n    \"email\": \"makashov73@gmail.com\"\n}\n\n```"
									},
									"response": []
								}
							],
							"id": "0ce61b58-c60d-43de-8511-063bfa9fe72d",
							"description": "> Набор запросов для обновления пользовательских данных и аватара\n\n**Upload user profile photo** - загружает на сервер файл-изображение в качестве аватара пользователя.\n\n**Updating user profile date** - обновление информации в профиле пользователя.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "069b8326-eb6f-4ff1-8cf7-0d3eb39a3dd1"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "247d61cc-8ace-4570-9d78-62b0613c03ec"
									}
								}
							]
						},
						{
							"name": "Use Case",
							"item": [
								{
									"name": "Profile photo test",
									"item": [
										{
											"name": "Remove user profile photo",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
															"    pm.test(`PASS: User profile photo deletion - Request time is: ${pm.response.responseTime} ms`, () => true);\r",
															"    console.log(`PASS: User profile photo deletion - Server response time is ${pm.response.responseTime} ms`);\r",
															"}\r",
															"catch(e) {\r",
															"    pm.test(`FAIL: User profile photo deletion - Request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
															"    console.log(`FAIL: User profile photo deletion - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
															"}\r",
															"\r",
															"try {\r",
															"    pm.expect(pm.response.to.have.status(201));\r",
															"    pm.test(`PASS: User profile photo deletion - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
															"    console.log(`PASS: User profile photo deletion - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
															"}\r",
															"catch(e) {\r",
															"    pm.test(`FAIL: User profile photo deletion - Server response status is: ${pm.response.code} ${pm.response.status} (must be 200 OK)`, () => {throw new Error(e.message)});\r",
															"    console.log(`FAIL: User profile photo deletion - Server response status is ${pm.response.code} ${pm.response.status} (must be 200 OK)`);\r",
															"}"
														],
														"type": "text/javascript",
														"id": "0be6daec-dc68-41dd-878e-dbb4ed27ebd8"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"Testing user profile photo deletion...\");\r",
															"pm.collectionVariables.set(\"filepath\",\"empty.abc\");"
														],
														"type": "text/javascript",
														"id": "5e492438-fe1b-4bed-8d9f-b3d28ef9b6a1"
													}
												}
											],
											"id": "41e2ae5a-e4cf-4b69-93af-963a44af999f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "image",
															"type": "file",
															"src": "{{filepath}}"
														}
													]
												},
												"url": "{{baseURL}}/user/photo",
												"description": "POST-запрос **Remove user profile photo**.\n\nПроизводит загрузку пустого файла-изображения пользовательского аватара. Имитирует удаление пользовательского аватара.\n\nПередаваемые параметры:\n\n*   *Image* - путь и наименование передаваемого файла."
											},
											"response": []
										},
										{
											"name": "Obtain user profile photo",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"Testing obtaining of user profile photo...\");"
														],
														"type": "text/javascript",
														"id": "7a9b9307-24c7-4e97-9baa-ee7964972c34"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
															"    pm.test(`PASS: Obtaining of user profile photo - Request time is: ${pm.response.responseTime} ms`, () => true);\r",
															"    console.log(`PASS: Obtaining of user profile photo - Server response time is ${pm.response.responseTime} ms`);\r",
															"}\r",
															"catch(e) {\r",
															"    pm.test(`FAIL: Obtaining of user profile photo - Request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
															"    console.log(`FAIL: Obtaining of user profile photo - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
															"}\r",
															"\r",
															"try {\r",
															"    pm.expect(pm.response.to.have.status(200));\r",
															"    pm.test(`PASS: Obtaining of user profile photo - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
															"    console.log(`PASS: Obtaining of user profile photo - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
															"}\r",
															"catch(e) {\r",
															"    pm.test(`FAIL: Obtaining of user profile photo - Server response status is: ${pm.response.code} ${pm.response.status} (must be 200 OK)`, () => {throw new Error(e.message)});\r",
															"    console.log(`FAIL: Obtaining of user profile photo - Server response status is ${pm.response.code} ${pm.response.status} (must be 200 OK)`);\r",
															"}\r",
															"\r",
															"try {\r",
															"    pm.expect(pm.response.headers.get('Content-Type')).not.oneOf(['image/jpeg', 'image/png', '.tiff']);\r",
															"    pm.test(`PASS: Obtain user profile photo - The image has been deleted`, () => true);\r",
															"    console.log(`PASS: Obtain user profile photo - The image has been deleted`);\r",
															"}\r",
															"catch(e) {\r",
															"    pm.test(`FAIL: Obtain user profile photo - The image has not been removed`, () => {throw new Error(e.message)});\r",
															"    console.log(`FAIL: Obtain user profile photo - The image has not been removed`);\r",
															"}"
														],
														"type": "text/javascript",
														"id": "644c1f2b-d8f0-4e26-8dea-c902ceb0ee7c"
													}
												}
											],
											"id": "53b03f29-ea78-409e-9400-ff9b1fc525ca",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/user/photo",
												"description": "GET-запрос **Obtain user profile photo**.\n\nПроизводит проверку, что аватар пользователя был заменён пустым файлом - имитируя удаление пользовательского аватара."
											},
											"response": []
										},
										{
											"name": "Upload user profile photo",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
															"    pm.test(`PASS: Uploading user profile photo - Request time is: ${pm.response.responseTime} ms`, () => true);\r",
															"    console.log(`PASS: Uploading user profile photo - Server response time is ${pm.response.responseTime} ms`);\r",
															"}\r",
															"catch(e) {\r",
															"    pm.test(`FAIL: Uploading user profile photo - Request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
															"    console.log(`FAIL: Uploading user profile photo - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
															"}\r",
															"\r",
															"try {\r",
															"    pm.expect(pm.response.to.have.status(201));\r",
															"    pm.test(`PASS: Uploading user profile photo - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
															"    console.log(`PASS: Uploading user profile photo - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
															"}\r",
															"catch(e) {\r",
															"    pm.test(`FAIL: Uploading user profile photo - Server response status is: ${pm.response.code} ${pm.response.status} (must be 201 OK)`, () => {throw new Error(e.message)});\r",
															"    console.log(`FAIL: Uploading user profile photo - Server response status is ${pm.response.code} ${pm.response.status} (must be 201 OK)`);\r",
															"}"
														],
														"type": "text/javascript",
														"id": "9306e301-3e68-4086-9887-0b40adc277e8"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"Testing uploading of user profile photo...\");\r",
															"const path = pm.collectionVariables.get(\"ava\");\r",
															"pm.collectionVariables.set(\"filepath\", path);"
														],
														"type": "text/javascript",
														"id": "cdf748d8-3947-41b4-a7d9-aa0c8f9a7270"
													}
												}
											],
											"id": "e477ea3e-a2c6-49df-9a24-870483c2283b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "image",
															"type": "file",
															"src": "{{filepath}}"
														}
													]
												},
												"url": "{{baseURL}}/user/photo/",
												"description": "POST-запрос **Upload user profile photo**.\n\nПроизводит загрузку нового изображения пользовательского аватара профиля.\n\nПередаваемые параметры:\n\n*   *Image* - путь и наименование передаваемого файла."
											},
											"response": []
										},
										{
											"name": "Obtain user profile photo",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var bodyData = responseBody;\r",
															"const hashA = CryptoJS.MD5(bodyData).toString();\r",
															"\r",
															"try {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
															"    pm.test(`PASS: Obtaining of user profile photo - Request time is: ${pm.response.responseTime} ms`, () => true);\r",
															"    console.log(`PASS: Obtaining of user profile photo - Server response time is ${pm.response.responseTime} ms`);\r",
															"}\r",
															"catch(e) {\r",
															"    pm.test(`FAIL: Obtaining of user profile photo - Request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
															"    console.log(`FAIL: Obtaining of user profile photo - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
															"}\r",
															"\r",
															"try {\r",
															"    pm.expect(pm.response.to.have.status(200));\r",
															"    pm.test(`PASS: Obtaining of user profile photo - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
															"    console.log(`PASS: Obtaining of user profile photo - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
															"}\r",
															"catch(e) {\r",
															"    pm.test(`FAIL: Obtaining of user profile photo - Server response status is: ${pm.response.code} ${pm.response.status} (must be 200 OK)`, () => {throw new Error(e.message)});\r",
															"    console.log(`FAIL: Obtaining of user profile photo - Server response status is ${pm.response.code} ${pm.response.status} (must be 200 OK)`);\r",
															"}\r",
															"\r",
															"try {\r",
															"    pm.expect(pm.response.headers.get('Content-Type')).to.be.oneOf(['image/jpeg', 'image/png', '.tiff']);\r",
															"    pm.test(`PASS: Obtain user profile photo - Content-Type is image`, () => true);\r",
															"    console.log(`PASS: Obtain user profile photo - Content-Type is image`);\r",
															"}\r",
															"catch(e) {\r",
															"    pm.test(`FAIL: Obtain user profile photo - Content-Type isn't image`, () => {throw new Error(e.message)});\r",
															"    console.log(`FAIL: Obtain user profile photo - Content-Type isn't image`);\r",
															"}\r",
															"\r",
															"try {\r",
															"    pm.expect(pm.collectionVariables.get(\"hashB\")).to.eql(hashA);\r",
															"    pm.test(`PASS: Obtain user profile photo - Obtained and reference hash are equal`, () => true);\r",
															"    console.log(`PASS: Obtain user profile photo - Obtained and reference hash are equal`);\r",
															"}catch(e) {\r",
															"    pm.test(`FAIL: Obtain user profile photo - Obtained and reference hash are not equal`, () => {throw new Error(e.message)});\r",
															"    console.log(`FAIL: Obtain user profile photo - Obtained and reference hash are not equal`)\r",
															"}"
														],
														"type": "text/javascript",
														"id": "4143d3f2-3b98-453f-a59f-c8053f33b858"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"Testing obtaining of user profile photo...\");"
														],
														"type": "text/javascript",
														"id": "26193549-024c-491f-8816-e56dceea1b8c"
													}
												}
											],
											"id": "9184f425-1849-40aa-ae8a-797907326296",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/user/photo/",
												"description": "GET-запрос **Obtain user profile photo**.\n\nПроизводит проверку, что новый аватар пользователя был загружен и является именно тем изображением, которое необходимо, путем вычисления MD5-hash файла с помощью встроенной в Postman функции `CryptoJS.MD5()` и сверки полученного значения с эталонным, вычисленным ранее значением, хранящимся в переменной коллекции под наименованием *hashB*."
											},
											"response": []
										}
									],
									"id": "1b03b712-6ad2-4464-82f6-f83e256fe066",
									"description": "> Набор запросов для тестирования установки аватара пользователя\n\n**Remove user profile photo** - удаляет пользовательский аватар, путем загрузки пустого файла изображения.\n\n**Obtain user profile photo** - проверяет то, что аватар пользователя был удален.\n\n**Upload user profile photo** - загружает новый аватар пользователя.\n\n**Obtain user profile photo** - производит сверку значения MD5-hash установленного аватара с эталонным значением.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "728b017f-c96f-41d0-bd47-d5e52058c0fb"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "7e13210c-5957-418e-8364-753b0ebc3f0e"
											}
										}
									]
								},
								{
									"name": "Profile data test",
									"item": [
										{
											"name": "Update user profile data",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"Testing of updating user profile data...\");"
														],
														"type": "text/javascript",
														"id": "e520804b-922f-45ca-a990-716a5cd8d764"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
															"    pm.test(`PASS: Updating user profile data - Request time is: ${pm.response.responseTime} ms`, () => true);\r",
															"    console.log(`PASS: Updating user profile data - Server response time is ${pm.response.responseTime} ms`);\r",
															"}\r",
															"catch(e) {\r",
															"    pm.test(`FAIL: Updating user profile data - Request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
															"    console.log(`FAIL: Updating user profile data - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
															"}\r",
															"\r",
															"try {\r",
															"    pm.expect(pm.response.to.have.status(201));\r",
															"    pm.test(`PASS: Updating user profile data - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
															"    console.log(`PASS: Updating user profile data - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
															"}\r",
															"catch(e) {\r",
															"    pm.test(`FAIL: Updating user profile data - Server response status is: ${pm.response.code} ${pm.response.status} (must be 201 OK)`, () => {throw new Error(e.message)});\r",
															"    console.log(`FAIL: Updating user profile data - Server response status is ${pm.response.code} ${pm.response.status} (must be 201 OK)`);\r",
															"}"
														],
														"type": "text/javascript",
														"id": "c594cb81-810a-4486-85be-50be3c99dabe"
													}
												}
											],
											"id": "fe100699-2903-44ec-8664-0e7808aacdd5",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": 10,\r\n    \"login\": \"79378839459\",\r\n    \"name\": \"Vladislav\",\r\n    \"surname\": \"Makashov\",\r\n    \"patronymic\": \"Igorevich\",\r\n    \"sex\":\"1\",\r\n    \"birthday\": \"1992-02-01\",\r\n    \"address\": {\r\n        \"postcode\": 432031,\r\n        \"country\": \"RU\",\r\n        \"state\": \"Ulyanovskaya oblast\",\r\n        \"city\": \"Ulyanovsk\",\r\n        \"address1\": \"Lelingradskaya 32\",\r\n        \"address2\": \"build 2, room 114\",\r\n        \"comment\": \"this is comment\"\r\n    },\r\n    \"phone\": \"+79378839459\",\r\n    \"email\": \"makashov.v@it-galen.com\",\r\n    \"email_verified_at\": \"2022-04-28T09:31:20\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseURL}}/user",
												"description": "PUT-запрос **Update user profile data**.\n\nОтсылает на сервер набор данных в поля профиля пользователя.\n\nПередаваемые параметры представляют собой JSON-схему.\n\n``` json\n{\n    \"id\": 10,\n    \"login\": \"79378839459\",\n    \"name\": \"Vladislav\",\n    \"surname\": \"Makashov\",\n    \"patronymic\": \"Igorevich\",\n    \"sex\":\"1\",\n    \"birthday\": \"1992-02-01\",\n    \"address\": {\n        \"postcode\": 432031,\n        \"country\": \"RU\",\n        \"state\": \"Ulyanovskaya oblast\",\n        \"city\": \"Ulyanovsk\",\n        \"address1\": \"Lelingradskaya 32\",\n        \"address2\": \"build 2, room 114\",\n        \"comment\": \"this is comment\"\n    },\n    \"phone\": \"+79378839459\",\n    \"email\": \"makashov.v@it-galen.com\",\n    \"email_verified_at\": \"2022-04-28T09:31:20\"\n}\n\n```"
											},
											"response": []
										},
										{
											"name": "Check user profile data",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"Testing that user profile data has been updated...\");\r",
															"let profileData = pm.collectionVariables.get(\"profileData\");\r",
															"\r",
															"if(!profileData || profileData.length == 0) {\r",
															"    profileData = [10, \"79378839459\", \"Vladislav\", \"Makashov\", \"Igorevich\", \"M\", \"1992-02-01\", \"+79378839459\", \"makashov.v@it-galen.com\", \"2022-04-28 09:31:20\", \"https://api-tests.galen-dev.site/media/37/conversions/photo2-thumb.jpg\"];\r",
															"}\r",
															"\r",
															"let currData = profileData.shift();\r",
															"pm.collectionVariables.set(\"currData\", currData);\r",
															"pm.collectionVariables.set(\"profileData\", profileData);"
														],
														"type": "text/javascript",
														"id": "7ef47fe5-d7f5-47d5-940a-886714ec7651"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const schema = {\r",
															"    \"type\": \"object\",\r",
															"    \"required\": [\"id\", \"login\", \"name\", \"surname\", \"patronymic\", \"sex\", \"birthday\", \"address\", \"phone\", \"email\", \"last_login_time\", \"email_verified_at\",  \"last_ip\", \"last_ip_geo\", \"opd\", \"photo\"],\r",
															"    \"properties\": {\r",
															"        \"id\": {\r",
															"            \"type\": \"number\"\r",
															"        },\r",
															"        \"login\": {\r",
															"            \"type\": \"string\"\r",
															"        },\r",
															"        \"name\": {\r",
															"            \"type\": \"string\"\r",
															"        },\r",
															"        \"surname\": {\r",
															"            \"type\": \"string\"\r",
															"        },\r",
															"        \"patronymic\": {\r",
															"            \"type\": \"string\"\r",
															"        },\r",
															"        \"sex\": {\r",
															"            \"type\": \"string\"\r",
															"        },\r",
															"        \"birthday\": {\r",
															"            \"type\": \"string\"\r",
															"        },\r",
															"        \"address\": {\r",
															"            \"type\": \"object\",\r",
															"            \"required\": [\"id\", \"postcode\", \"country\", \"state\", \"city\", \"address1\", \"address2\", \"comment\"],\r",
															"            \"properties\": {\r",
															"                \"id\": {\r",
															"                    \"type\": \"number\"\r",
															"                },\r",
															"                \"postcode\": {\r",
															"                    \"type\": \"number\"\r",
															"                },\r",
															"                \"country\": {\r",
															"                    \"type\": \"string\"\r",
															"                },\r",
															"                \"state\": {\r",
															"                    \"type\": \"string\"\r",
															"                },\r",
															"                \"city\": {\r",
															"                    \"type\": \"string\"\r",
															"                },\r",
															"                \"address1\": {\r",
															"                    \"type\": \"string\"\r",
															"                },\r",
															"                \"address2\": {\r",
															"                    \"type\": \"string\"\r",
															"                },\r",
															"                \"comment\": {\r",
															"                    \"type\": \"string\"\r",
															"                },\r",
															"            }\r",
															"        },\r",
															"        \"phone\": {\r",
															"            \"type\": \"string\"\r",
															"        },\r",
															"        \"email\": {\r",
															"            \"type\": \"string\"\r",
															"        },\r",
															"        \"last_login_time\": {\r",
															"            \"type\": \"string\"\r",
															"        },\r",
															"        \"email_verified_at\": {\r",
															"            \"type\": \"string\"\r",
															"        },\r",
															"        \"last_ip\": {\r",
															"            \"type\": \"string\"\r",
															"        },\r",
															"        \"last_ip_geo\": {\r",
															"            \"type\": \"string\"\r",
															"        },\r",
															"        \"opd\": {\r",
															"            \"type\": \"string\"\r",
															"        },\r",
															"        \"photo\": {\r",
															"            \"type\": \"string\"\r",
															"        }\r",
															"    }\r",
															"};\r",
															"\r",
															"const profileData = pm.collectionVariables.get(\"profileData\");\r",
															"let obtainedData = pm.collectionVariables.get(\"obtainedData\");\r",
															"\r",
															"var bodyData = JSON.parse(responseBody);\r",
															"var uid = bodyData.id;\r",
															"var login = bodyData.login;\r",
															"var name = bodyData.name;\r",
															"var surname = bodyData.surname;\r",
															"var patronymic = bodyData.patronymic;\r",
															"var sex = bodyData.sex;\r",
															"var birthday = bodyData.birthday;\r",
															"//var address = bodyData.address;\r",
															"var phone = bodyData.phone;\r",
															"var email = bodyData.email;\r",
															"var email_verified_at = bodyData.email_verified_at;\r",
															"var photo = bodyData.photo;\r",
															"\r",
															"if(!obtainedData || obtainedData.length == 0) {\r",
															"    obtainedData = [uid, login, name, surname, patronymic, sex, birthday, phone, email, email_verified_at, photo];\r",
															"}\r",
															"\r",
															"if((profileData && profileData.length > 0) && (obtainedData && obtainedData.length > 0)){\r",
															"    postman.setNextRequest(\"Check user profile data\");   \r",
															"    let currObtainedData = obtainedData.shift();\r",
															"    pm.collectionVariables.set(\"currObtainedData\", currObtainedData);\r",
															"    pm.collectionVariables.set(\"obtainedData\", obtainedData);\r",
															"    try {\r",
															"        pm.expect(pm.collectionVariables.get(\"currObtainedData\")).to.eql(pm.collectionVariables.get(\"currData\"));\r",
															"        pm.test(`PASS: Validating of user profile data - User profile data is valid`, () => true);\r",
															"        console.log(`PASS: Validating of user profile data - Value ${currObtainedData} is valid`);\r",
															"    }\r",
															"    catch(e) {\r",
															"        pm.test(`FAIL: Validating of user profile data - User profile data is not valid`, () => {throw new Error(e.message)});\r",
															"        console.log(`FAIL: Validating of user profile data - Value ${currObtainedData} is not valid`);\r",
															"    }\r",
															"} else {\r",
															"    pm.collectionVariables.set(\"currData\", null);\r",
															"    pm.collectionVariables.set(\"profileData\", null);\r",
															"    pm.collectionVariables.set(\"currObtainedData\", null);\r",
															"    pm.collectionVariables.set(\"obtainedData\", null);\r",
															"    try {\r",
															"        pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
															"        pm.test(`PASS: Obtaining of user profile data - Request time is: ${pm.response.responseTime} ms`, () => true);\r",
															"        console.log(`PASS: Obtaining of user profile data - Server response time is ${pm.response.responseTime} ms`);\r",
															"    }\r",
															"    catch(e) {\r",
															"        pm.test(`FAIL: Obtaining of user profile data - Request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
															"        console.log(`FAIL: Obtaining of user profile data - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
															"    }\r",
															"\r",
															"    try {\r",
															"        pm.expect(pm.response.to.have.status(200));\r",
															"        pm.test(`PASS: Obtaining of user profile data - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
															"        console.log(`PASS: Obtaining of user profile data - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
															"    }\r",
															"    catch(e) {\r",
															"        pm.test(`FAIL: Obtaining of user profile data - Server response status is: ${pm.response.code} ${pm.response.status} (must be 200 OK)`, () => {throw new Error(e.message)});\r",
															"        console.log(`FAIL: Obtaining of user profile data - Server response status is ${pm.response.code} ${pm.response.status} (must be 200 OK)`);\r",
															"    }\r",
															"\r",
															"    try {\r",
															"        pm.response.to.have.jsonSchema(schema);\r",
															"        pm.test(`PASS: Obtaining of user profile data - JSON schema is valid`, () => true);\r",
															"        console.log(`PASS: Obtaining of user profile data - JSON schema is valid`);\r",
															"    }\r",
															"    catch(e) {\r",
															"        pm.test(`FAIL: Obtaining of user profile data - JSON schema is not valid`, () => {throw new Error(e.message)});\r",
															"        console.log(`FAIL: Obtaining of user profile data - schema is not valid`);\r",
															"    }\r",
															"    console.log(\"User profile data is valid!\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"id": "c465ce69-857d-4b47-b397-77fa661efb34"
													}
												}
											],
											"id": "c659ed85-f7fe-42d2-bd5f-d9818b9c7c17",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/user",
												"description": "GET-запрос **Check user profile data**.\n\nОсуществляет получение значений данных полей профиля пользователя и их валиадацию:\n\n*   проверка валидности полученной JSON-схемы;\n*   проверка на корректность принятых данных, в соответствии с переданными ранее."
											},
											"response": []
										},
										{
											"name": "Update user subscription plan to FREE",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"Testing subscription user to FREE plan...\");\r",
															"pm.collectionVariables.set(\"subscription\", 1);"
														],
														"type": "text/javascript",
														"id": "77caf4bf-8a9d-4bb4-9a1c-2a02f1efd310"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"try {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
															"    pm.test(`PASS: Update user subscription plan to FREE - Request time is: ${pm.response.responseTime} ms`, () => true);\r",
															"    console.log(`PASS: Update user subscription plan to FREE - Server response time is ${pm.response.responseTime} ms`);\r",
															"}\r",
															"catch(e) {\r",
															"    pm.test(`FAIL: Update user subscription plan to FREE - Request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
															"    console.log(`FAIL: Update user subscription plan to FREE - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
															"}\r",
															"\r",
															"try {\r",
															"    pm.expect(pm.response.to.have.status(201));\r",
															"    pm.test(`PASS: Update user subscription plan to FREE - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
															"    console.log(`PASS: Update user subscription plan to FREE - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
															"}\r",
															"catch(e) {\r",
															"    pm.test(`FAIL: Update user subscription plan to FREE - Server response status is: ${pm.response.code} ${pm.response.status} (must be 201 Created)`, () => {throw new Error(e.message)});\r",
															"    console.log(`FAIL: Update user subscription plan to FREE - Server response status is ${pm.response.code} ${pm.response.status} (must be 201 Created)`);\r",
															"}"
														],
														"type": "text/javascript",
														"id": "9769bccb-2b54-4a6c-8cef-b450ebeefc2c"
													}
												}
											],
											"id": "428c0ea3-f671-4e18-836a-c86087ec459e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"url": "{{baseURL}}/user/plan/{{subscription}}",
												"description": "POST-запрос **Update user subscription plan to FREE.**\n\nОбновляет подписку пользователя и переводит его на бесплатный план."
											},
											"response": []
										}
									],
									"id": "995a04b9-2646-4098-a4f2-4a249aee505c",
									"description": "> Набор запросов для тестирования наполнения данными профиля пользователя\n\n**Upload user profile data** - запрос осуществляет заполнение полей профиля пользователя различными данными.\n\n**Check user profile data** - запрос осуществляет получение списка полей с данными пользователя и их валидацию.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "9022f0b7-c2b0-4546-87c3-1b6270588956"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "55235fd6-1b50-4687-a630-1b99cab2c0df"
											}
										}
									]
								}
							],
							"id": "c2fffc8d-0bca-441f-95b7-202920ea0d05",
							"description": "> Содержит набор со списками запросов для тестирования работы с профилем пользователя\n\n*   *Profile photo test*\n*   *Profile data test*"
						}
					],
					"id": "920b0f1a-95bc-43b3-9cee-5a45038aabf6",
					"description": "> Набор тестов профиля пользователя\n\n**Create user profile** - набор запросов для наполнения профиля пользователя данными.\n\n**Read user profile** - набор запросов для получения информации из профиля пользователя.\n\n**Update user profile** - содержит набор запросов на обновление информации, содержащейся в профиле пользователя.\n\n**Use Case** - содержит набор запросов для тестирования замены пользовательского аватара и валидации файла изображения (*Profile photo test*), а также набор запросов для заполнения данными профиля пользователя и валидации добавленных данных (*Profile data test*).",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "04205d35-90d3-4e57-a9b5-8717ac423614"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "55347992-a53f-4485-b849-4bda3d5360d8"
							}
						}
					]
				},
				{
					"name": "Metrics",
					"item": [
						{
							"name": "Create metric",
							"item": [
								{
									"name": "Add metrics",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
													"    pm.test(`PASS: Adding a metric - Request time is: ${pm.response.responseTime} ms`, () => true);\r",
													"    console.log(`PASS: Adding a metric - Server response time is ${pm.response.responseTime} ms`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Adding a metric - Request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Adding a metric - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.to.have.status(201));\r",
													"    pm.test(`PASS: Adding a metric - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
													"    console.log(`PASS: Adding a metric - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Adding a metric - Server response status is: ${pm.response.code} ${pm.response.status} (must be 201 OK)`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Adding a metric - Server response status is ${pm.response.code} ${pm.response.status} (must be 201 OK)`);\r",
													"}"
												],
												"type": "text/javascript",
												"id": "b7c5d957-9223-44da-b0d3-3d0ea44951ac"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Testing adding a metric...\");\r",
													"\r",
													"const moment = require('moment');\r",
													"pm.collectionVariables.set('currdatetime', moment().format(\"YYYY-MM-DD[T]HH:mm:ss\"));"
												],
												"type": "text/javascript",
												"id": "019bd90c-1559-422d-b05d-3f153ae085b4"
											}
										}
									],
									"id": "e5a5f7ae-1ed9-4877-b842-b7ad1c0da5d6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"timestamp\": \"{{currdatetime}}\",\r\n            \"value\": 98,\r\n            \"name\": \"BodyOxygen\",\r\n            \"device\": \"mkv\",\r\n            \"waveform\": null\r\n        },\r\n        {\r\n            \"timestamp\": \"{{currdatetime}}\",\r\n            \"value\": 87,\r\n            \"name\": \"PulseRate\",\r\n            \"device\": \"mkv\",\r\n            \"waveform\": null\r\n        },\r\n        {\r\n            \"timestamp\": \"{{currdatetime}}\",\r\n            \"value\": 16,\r\n            \"name\": \"BreathingRate\",\r\n            \"device\": \"mkv\",\r\n            \"waveform\": null\r\n        },\r\n        {\r\n            \"timestamp\": \"{{currdatetime}}\",\r\n            \"value\": 36.6,\r\n            \"name\": \"BodyTemperature\",\r\n            \"device\": \"mkv\",\r\n            \"waveform\": null\r\n        },\r\n        {\r\n            \"timestamp\": \"{{currdatetime}}\",\r\n            \"value\": 7.6,\r\n            \"name\": \"PrefusionIndex\",\r\n            \"device\": \"mkv\",\r\n            \"waveform\": null\r\n        }\r\n    ]\r\n    \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/metric",
										"description": "POST-запрос **Add a metric**.\n\nОсуществляет передачу на сервер значений метрик, для имитации измерений пользователем различных показателей.\n\nПодставляет текущую дату и время, полученную с помощью встроенной функции `moment()`.\n\nПередаваемые параметры представляют собой JSON-схему:\n\n``` json\n{\n    \"data\": [\n        {\n            \"timestamp\": \"{{currdatetime}}\",\n            \"value\": 98,\n            \"name\": \"BodyOxygen\",\n            \"device\": \"mkv\",\n            \"waveform\": null\n        },\n        {\n            \"timestamp\": \"{{currdatetime}}\",\n            \"value\": 87,\n            \"name\": \"PulseRate\",\n            \"device\": \"mkv\",\n            \"waveform\": null\n        },\n        {\n            \"timestamp\": \"{{currdatetime}}\",\n            \"value\": 16,\n            \"name\": \"BreathingRate\",\n            \"device\": \"mkv\",\n            \"waveform\": null\n        },\n        {\n            \"timestamp\": \"{{currdatetime}}\",\n            \"value\": 36.6,\n            \"name\": \"BodyTemperature\",\n            \"device\": \"mkv\",\n            \"waveform\": null\n        },\n        {\n            \"timestamp\": \"{{currdatetime}}\",\n            \"value\": 7.6,\n            \"name\": \"PrefusionIndex\",\n            \"device\": \"mkv\",\n            \"waveform\": null\n        }\n    ]\n}\n\n```"
									},
									"response": []
								},
								{
									"name": "Add a specific metric (Oxygen)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
													"    pm.test(`PASS: Adding a metric - Request time is: ${pm.response.responseTime} ms`, () => true);\r",
													"    console.log(`PASS: Adding a metric - Server response time is ${pm.response.responseTime} ms`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Adding a metric - Request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Adding a metric - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.to.have.status(201));\r",
													"    pm.test(`PASS: Adding a metric - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
													"    console.log(`PASS: Adding a metric - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Adding a metric - Server response status is: ${pm.response.code} ${pm.response.status} (must be 201 OK)`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Adding a metric - Server response status is ${pm.response.code} ${pm.response.status} (must be 201 OK)`);\r",
													"}"
												],
												"type": "text/javascript",
												"id": "ac69edff-c639-4995-b7c3-8474ded15a5a"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Testing adding a metric...\");\r",
													"\r",
													"const moment = require('moment');\r",
													"pm.collectionVariables.set('currdatetime', moment().format(\"YYYY-MM-DD[T]HH:mm:ss\"));"
												],
												"type": "text/javascript",
												"id": "ebc91d97-9bb6-4662-863a-d972369b4009"
											}
										}
									],
									"id": "1bb9ac1c-d87b-4bf8-80fe-7595d62ccf50",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n            \"timestamp\": \"{{currdatetime}}\",\r\n            \"value\": 98,\r\n            \"name\": \"BodyOxygen\",\r\n            \"device\": \"mkv\",\r\n            \"waveform\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/metric/BodyOxygen",
										"description": "POST-запрос **Add a specific metric (Oxygen)**.\n\nОсуществляет передачу на сервер значения конкретной метрики (Oxygen), для имитации измерения пользователем оксигинации.\n\nПодставляет текущую дату и время, полученную с помощью встроенной функции `moment()`.\n\nПередаваемые параметры представляют собой JSON-схему:\n\n``` json\n{\n            \"timestamp\": \"{{currdatetime}}\",\n            \"value\": 98,\n            \"name\": \"BodyOxygen\",\n            \"device\": \"mkv\",\n            \"waveform\": null\n}\n\n```"
									},
									"response": []
								}
							],
							"id": "d6b44ba2-6188-43c4-80b7-1466fea5094b",
							"description": "> Набор запросов для тестирования добавления метрик пользователя\n\n**Add a metric** - запрос добавляет новые значения для метрик пользователя.\n\n**Add a specific metric (Oxygen)** - запрос добавляет новое значения для метрики конкретной метрики (Oxygen).",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "5a0b13af-b45f-4377-a71f-e50c61e9c67a"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "8fdc4365-23f3-4a7b-ab05-03ded7eb2d57"
									}
								}
							]
						},
						{
							"name": "Read metric",
							"item": [
								{
									"name": "Obtain metric meta",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    \"type\": \"array\",\r",
													"    \"items\": {\r",
													"        \"type\": \"object\",\r",
													"        \"required\": [\"id_metric\", \"title\", \"name\", \"unit\", \"percent\", \"image\", \"description\", \"range\", \"display_name\"],\r",
													"        \"properties\": {\r",
													"            \"id_metric\": {\r",
													"                \"type\": \"number\"\r",
													"            },\r",
													"            \"title\": {\r",
													"                \"type\": [\"string\", \"null\"] //change\r",
													"            },\r",
													"            \"name\": {\r",
													"                \"type\": \"string\"\r",
													"            },\r",
													"            \"unit\": {\r",
													"                \"type\": [\"string\", \"null\"] //change\r",
													"            },\r",
													"            \"percent\": {\r",
													"                \"type\": \"number\"\r",
													"            },\r",
													"            \"image\": {\r",
													"                \"type\": [\"string\", \"null\"] //change\r",
													"            },\r",
													"            \"description\": {\r",
													"                \"type\": [\"string\",\"null\"] //change\r",
													"            },\r",
													"            \"range\": {\r",
													"                \"type\": \"array\",\r",
													"                \"items\": {\r",
													"                    \"type\": \"object\",\r",
													"                    \"required\": [\"id\", \"max\", \"min\", \"rel\", \"type\"],\r",
													"                    \"properties\": {\r",
													"                        \"id\": {\r",
													"                            \"type\": \"number\"\r",
													"                        },\r",
													"                        \"max\": {\r",
													"                            \"type\": \"number\"\r",
													"                        },\r",
													"                        \"min\": {\r",
													"                            \"type\": \"number\"\r",
													"                        },\r",
													"                        \"rel\": {\r",
													"                            \"type\": \"string\"\r",
													"                        },\r",
													"                        \"type\": {\r",
													"                            \"type\": \"string\"\r",
													"                        }\r",
													"                    }\r",
													"                }\r",
													"            },\r",
													"            \"display_name\": {\r",
													"                \"type\": [\"string\", \"null\"] //change\r",
													"            }\r",
													"        }\r",
													"    }\r",
													"};\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
													"    pm.test(`PASS: Obtaining of user metric config - request time is: ${pm.response.responseTime} ms`, () => true);\r",
													"    console.log(`PASS: Obtaining of user metric config - Server response time is ${pm.response.responseTime} ms`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of user metric config - request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of user metric config - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.to.have.status(200));\r",
													"    pm.test(`PASS: Obtaining of user metric config - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
													"    console.log(`PASS: Obtaining of user metric config - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of user metric config - Server response status is: ${pm.response.code} ${pm.response.status} (must be 200 OK)`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of user metric config - Server response status is ${pm.response.code} ${pm.response.status} (must be 200 OK)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"    pm.test(`PASS: Obtaining of user metric config - JSON schema is valid`, () => true);\r",
													"    console.log(`PASS: Obtaining of user metric config - JSON schema is valid`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of user metric config - JSON schema is not valid`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of user metric config - schema is not valid`);\r",
													"}"
												],
												"type": "text/javascript",
												"id": "8e39ba44-68ac-44f9-9beb-4928b4b4d6d5"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Testing obtaining of metric meta...\");"
												],
												"type": "text/javascript",
												"id": "309202d6-9b54-45c3-a8b6-039f8795043c"
											}
										}
									],
									"id": "39c7e866-b15e-4478-b430-a81a03e27e12",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/metric/meta",
										"description": "GET-запрос **Obtain metric meta.**\n\nПолучает список параметров и описания метрик пользователя.\n\nПроизводит валидацию JSON-схемы."
									},
									"response": []
								},
								{
									"name": "Obtain last user metric",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    \"type\": \"array\",\r",
													"    \"items\": {\r",
													"        \"type\": \"object\",\r",
													"        \"required\": [\"timestamp\", \"value\", \"device\", \"id\", \"name\", \"waveform\", \"value_mod\"],\r",
													"        \"properties\": {\r",
													"            \"timestamp\": {\r",
													"                \"type\": \"string\"\r",
													"            },\r",
													"            \"value\": {\r",
													"                \"type\": \"number\"\r",
													"            },\r",
													"            \"device\": {\r",
													"                \"type\": \"string\"\r",
													"            },\r",
													"            \"id\": {\r",
													"                \"type\": \"number\"\r",
													"            },\r",
													"            \"name\": {\r",
													"                \"type\": \"string\"\r",
													"            },\r",
													"            \"waveform\": {\r",
													"                \"type\": [\"string\", \"null\"] //change\r",
													"            },\r",
													"            \"value_mod\": {\r",
													"                \"type\": [\"array\", \"null\"], //change\r",
													"                \"items\": {\r",
													"                    \"type\": \"number\"\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"    }\r",
													"};\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
													"    pm.test(`PASS: Obtaining of last user metric - request time is: ${pm.response.responseTime} ms`, () => true);\r",
													"    console.log(`PASS: Obtaining of last user metric - Server response time is ${pm.response.responseTime} ms`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of last user metric - request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of last user metric - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.to.have.status(200));\r",
													"    pm.test(`PASS: Obtaining of last user metric - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
													"    console.log(`PASS: Obtaining of last user metric - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of last user metric - Server response status is: ${pm.response.code} ${pm.response.status} (must be 200 OK)`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of last user metric - Server response status is ${pm.response.code} ${pm.response.status} (must be 200 OK)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"    pm.test(`PASS: Obtaining of last user metric - JSON schema is valid`, () => true);\r",
													"    console.log(`PASS: Obtaining of last user metric - JSON schema is valid`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of last user metric - JSON schema is not valid`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of last user metric - schema is not valid`);\r",
													"}"
												],
												"type": "text/javascript",
												"id": "c8dfb4c3-cdfa-4321-bfbe-9dd387a22c2a"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Testing obtaining of user metric config...\");"
												],
												"type": "text/javascript",
												"id": "81018175-2020-42bd-87f8-ed62524bb337"
											}
										}
									],
									"id": "f37912d1-b1f0-4671-b5db-fd30f135dd51",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/metric/last",
										"description": "GET-запрос **Obtain last user metric**.\n\nПолучает список значений результатов последних измерений по каждой метрике для пользователя.\n\nПроизводит валидацию JSON-схемы."
									},
									"response": []
								}
							],
							"id": "c3f5d333-f8e8-4d7b-9917-20abf7ccf65b",
							"description": "> Набор запросов получения и валидации метрик пользователя\n\n**Obtain metric meta** \\- получает список параметров и описания метрик пользователя.\n\n**Obtain last user metric** - получает список значений результатов последних измерений по каждой метрике для пользователя.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "8972935e-bc4e-4585-93ec-2eeabf8d46bc"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "d375b18c-d3be-4f39-a21f-5a8526216ba2"
									}
								}
							]
						}
					],
					"id": "b10dea00-b712-4176-a8ed-fecb3a0b628b",
					"description": "> Набор тестов метрик пользователя\n\n**Create metric** - содержит запрос для тестирования добавления метрик пользователя.\n\n**Read metric** - содержит набор запросов для тестирования получения конфигурации и списка метрик пользователя.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "d7df7946-63bc-49aa-b871-2ce928c97a64"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "61fdd2d5-7fde-44fa-9b0f-8fc3b8085b81"
							}
						}
					]
				},
				{
					"name": "Reports",
					"item": [
						{
							"name": "Create report",
							"item": [
								{
									"name": "Add a user report",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
													"    pm.test(`PASS: Adding a user report - Request time is: ${pm.response.responseTime} ms`, () => true);\r",
													"    console.log(`PASS: Adding a user report - Server response time is ${pm.response.responseTime} ms`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Adding a user report - Request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Adding a user report - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.to.have.status(201));\r",
													"    pm.test(`PASS: Adding a user report - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
													"    console.log(`PASS: Adding a user report - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Adding a user report - Server response status is: ${pm.response.code} ${pm.response.status} (must be 201 OK)`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Adding a user report - Server response status is ${pm.response.code} ${pm.response.status} (must be 201 OK)`);\r",
													"}\r",
													"\r",
													"setTimeout(() => {}, 1000); \r",
													"\r",
													"var bodyData = JSON.parse(responseBody);\r",
													"var repid = bodyData.id;\r",
													"pm.collectionVariables.set(\"report_id\", repid);"
												],
												"type": "text/javascript",
												"id": "8fa5d002-3909-47a9-967e-1bd9664e8900"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Testing adding a user report...\");\r",
													"\r",
													"const moment = require('moment');\r",
													"pm.collectionVariables.set('start', moment().format(\"YYYY-MM-DD[T]00:00:00\"));\r",
													"pm.collectionVariables.set('end', moment().format(\"YYYY-MM-DD[T]23:59:59\"));"
												],
												"type": "text/javascript",
												"id": "3806195c-ec5f-43dc-a7eb-cca270d413a4"
											}
										}
									],
									"id": "c8c3c5b5-9a7e-401a-a0fc-2ec7957e82e7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"metrics\": [\r\n        {\r\n            \"name\": \"BodyOxygen\"\r\n        },\r\n        {\r\n            \"name\": \"PulseRate\"\r\n        },\r\n        {\r\n            \"name\": \"BreathingRate\"\r\n        },\r\n        {\r\n            \"name\": \"BodyTemperature\"\r\n        },\r\n        {\r\n            \"name\": \"PrefusionIndex\"\r\n        }\r\n    ],\r\n    \"date_start\": \"{{start}}\",\r\n    \"date_end\": \"{{end}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/report",
										"description": "POST-запрос **Add a user report**.\n\nОсуществляет отправку на сервер значений для формирования нового пользовательского отчета по трем показаниям метрик: *BodyOxygen*, *PulseRate,* *BreathingRate, BodyTemperature, PrefusionIndex.*\n\nПодставляет дату и время, полученную с помощью встроенной функции `moment()`в качестве начального и конечного значений диапазона.\n\nПередаваемые параметры представляют собой JSON-схему:\n\n``` json\n{\n    \"metrics\": [\n        {\n            \"name\": \"BodyOxygen\"\n        },\n        {\n            \"name\": \"PulseRate\"\n        },\n        {\n            \"name\": \"BreathingRate\"\n        },\n        {\n            \"name\": \"BodyTemperature\"\n        },\n        {\n            \"name\": \"PrefusionIndex\"\n        }\n    ],\n    \"date_start\": \"{{start}}\",\n    \"date_end\": \"{{end}}\"\n}\n\n```"
									},
									"response": []
								}
							],
							"id": "861b82b3-bdcc-4c16-b034-c73e70979aba",
							"description": "> Набор запросов тестирования создания нового отчета пользователем\n\n**Add a user report** \\- запрос создания нового отчета пользователя.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "7c5d9b0f-8a09-4e50-876c-37078e60c8b2"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "4953c3cc-20ac-45de-8716-f1508ebe8788"
									}
								}
							]
						},
						{
							"name": "Read report",
							"item": [
								{
									"name": "Obtain a specific custom user report",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"required\": [\"id_user_report\", \"id_user\", \"metrics\", \"date_start\", \"date_end\", \"time_start\", \"time_end\", \"link\", \"generated\", \"created_at\", \"updated_at\", \"deleted_at\"],\r",
													"    \"properties\": {\r",
													"        \"id_user_report\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"id_user\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"metrics\": {\r",
													"            \"type\": \"array\",\r",
													"            \"items\": {\r",
													"                \"type\": \"object\",\r",
													"                \"required\": [\"id\", \"guid\", \"name\", \"unit\", \"icon\", \"range\", \"items\"],\r",
													"                \"properties\": {\r",
													"                    \"id\": {\r",
													"                        \"type\": \"number\"\r",
													"                    },\r",
													"                    \"guid\": {\r",
													"                        \"type\": \"string\"\r",
													"                    },\r",
													"                    \"name\": {\r",
													"                        \"type\": [\"string\", \"null\"]  //change\r",
													"                    },\r",
													"                    \"unit\": {\r",
													"                        \"type\": [\"string\", \"null\"]  //change\r",
													"                    },\r",
													"                    \"icon\": {\r",
													"                        \"type\": \"string\"\r",
													"                    },\r",
													"                    \"range\": {\r",
													"                        \"type\": \"array\",\r",
													"                        \"items\": {\r",
													"                            \"type\": \"object\",\r",
													"                            \"required\": [\"id\",\"max\",\"min\",\"rel\",\"type\"],\r",
													"                            \"properties\": {\r",
													"                                \"id\": {\r",
													"                                    \"type\": \"number\"\r",
													"                                },\r",
													"                                \"max\": {\r",
													"                                    \"type\": \"number\"\r",
													"                                },\r",
													"                                \"min\": {\r",
													"                                    \"type\": \"number\"\r",
													"                                },\r",
													"                                \"rel\": {\r",
													"                                    \"type\": \"string\"\r",
													"                                },\r",
													"                                \"type\": {\r",
													"                                    \"type\": \"string\"\r",
													"\t\t\t\t\t\t\t\t}\r",
													"\t\t\t\t\t\t\t}\r",
													"                        }\r",
													"                    },\r",
													"                    \"items\": {\r",
													"                        \"type\": \"array\",\r",
													"\t\t\t\t\t\t\"required\": [\"id\",\"max\",\"min\",\"rel\",\"type\"],\r",
													"                        \"properties\": {\r",
													"\t\t\t\t\t\t\t\"id\": {\r",
													"\t\t\t\t\t\t\t\t\"type\": \"number\"\r",
													"\t\t\t\t\t\t\t},\r",
													"\t\t\t\t\t\t\t\"id\": {\r",
													"\t\t\t\t\t\t\t\t\"timestamp\": \"string\"\r",
													"\t\t\t\t\t\t\t},\r",
													"\t\t\t\t\t\t\t\"value\": {\r",
													"\t\t\t\t\t\t\t\t\"type\": \"array\",\r",
													"                                \"items\": {\r",
													"\t\t\t\t\t\t\t\t\t\"type\": \"number\"\r",
													"                                }\r",
													"                            }\r",
													"\t\t\t\t\t\t}\r",
													"\t\t\t\t\t}\r",
													"                }\r",
													"            }\r",
													"        },\r",
													"        \"date_start\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"date_end\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"time_start\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"time_end\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"link\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"generated\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"created_at\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"updated_at\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"deleted_at\": {\r",
													"            \"type\": [\"string\", \"null\"]\r",
													"        }\r",
													"    }\r",
													"};\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
													"    pm.test(`PASS: Obtaining of a specific custom user report - Request time is: ${pm.response.responseTime} ms`, () => true);\r",
													"    console.log(`PASS: Obtaining of a specific custom user report - Server response time is ${pm.response.responseTime} ms`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of a specific custom user report - Request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of a specific custom user report - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.to.have.status(200));\r",
													"    pm.test(`PASS: Obtaining of a specific custom user report - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
													"    console.log(`PASS: Obtaining of a specific custom user report - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of a specific custom user report - Server response status is: ${pm.response.code} ${pm.response.status} (Must be 200 OK)`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of a specific custom user report - Server response status is ${pm.response.code} ${pm.response.status} (Must be 200 OK)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"    pm.test(`PASS: Obtaining of a specific custom user report - JSON schema is valid`, () => true);\r",
													"    console.log(`PASS: Obtaining of a specific custom user report - JSON schema is valid`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of a specific custom user report - JSON schema is not valid`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of a specific custom user report - schema is not valid`);\r",
													"}"
												],
												"type": "text/javascript",
												"id": "6cbb3a02-0a2c-4721-80a8-fb39e3061114"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Testing obtaining of a specific custom user report...\");"
												],
												"type": "text/javascript",
												"id": "50c42da5-06d4-47b7-9c73-ae91be5605e8"
											}
										}
									],
									"id": "79b16a0c-73a1-487c-b125-c53a00b83cf2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/report/{{report_id}}",
										"description": "GET-запрос **Obtain a specific custom user report.**\n\nПолучает определенный пользовательский отчет по его id.\n\nПроизводит валидацию JSON-схемы."
									},
									"response": []
								},
								{
									"name": "Obtain report list in a range",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Testing obtaining of user report list in a range...\");\r",
													"\r",
													"const moment = require('moment');\r",
													"pm.collectionVariables.set('start', moment().format(\"YYYY-MM-DD[T]00:00:00\"));\r",
													"pm.collectionVariables.set('end', moment().format(\"YYYY-MM-DD[T]23:59:59\"));"
												],
												"type": "text/javascript",
												"id": "a18a3fcf-97c1-40c5-9fae-769d9b11a684"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"required\": [\"current_page\", \"data\", \"first_page_url\", \"from\", \"last_page\", \"last_page_url\", \"next_page_url\",\"path\", \"per_page\", \"prev_page_url\", \"to\", \"total\"],\r",
													"    \"properties\": {\r",
													"        \"current_page\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"data\": {\r",
													"            \"type\": \"array\",\r",
													"            \"items\": {\r",
													"                \"type\": \"object\",\r",
													"                \"required\": [\"id_user_report\", \"id_user\", \"metrics\", \"date_start\", \"date_end\", \"time_start\", \"time_end\", \"link\", \"generated\", \"created_at\", \"updated_at\", \"deleted_at\"],\r",
													"                \"properties\": {\r",
													"                    \"id_user_report\": {\r",
													"                        \"type\": \"number\"\r",
													"                    },\r",
													"                    \"id_user\": {\r",
													"                        \"type\": \"number\"\r",
													"                    },\r",
													"                    \"metrics\": {\r",
													"                        \"type\": \"array\",\r",
													"                        \"items\": {\r",
													"                            \"type\": \"object\",\r",
													"                            \"required\": [\"id\", \"guid\", \"name\", \"unit\", \"icon\", \"range\", \"items\"],\r",
													"                            \"properties\": {\r",
													"                                \"id\": {\r",
													"                                    \"type\": \"number\"\r",
													"                                },\r",
													"                                \"guid\": {\r",
													"                                    \"type\": \"string\"\r",
													"                                },\r",
													"                                \"name\": {\r",
													"                                    \"type\": [\"string\", \"null\"] //change\r",
													"                                },\r",
													"                                \"unit\": {\r",
													"                                    \"type\": [\"string\", \"null\"] //change\r",
													"                                },\r",
													"                                \"icon\": {\r",
													"                                    \"type\": \"string\"\r",
													"                                },\r",
													"                                \"range\": {\r",
													"                                    \"type\": \"array\",\r",
													"                                    \"items\": {\r",
													"                                        \"type\": \"object\",\r",
													"                                        \"required\": [\"id\", \"max\", \"min\", \"rel\", \"type\"],\r",
													"                                        \"properties\": {\r",
													"                                            \"id\": {\r",
													"                                                \"type\": \"number\"\r",
													"                                            },\r",
													"                                            \"max\": {\r",
													"                                                \"type\": \"number\"\r",
													"                                            },\r",
													"                                            \"min\": {\r",
													"                                                \"type\": \"number\"\r",
													"                                            },\r",
													"                                            \"rel\": {\r",
													"                                                \"type\": \"string\"\r",
													"                                            },\r",
													"                                            \"type\": {\r",
													"                                                \"type\": \"string\"\r",
													"                                            }\r",
													"                                        },\r",
													"                                    },\r",
													"                                },\r",
													"                                \"items\": {\r",
													"                                    \"type\": \"array\",\r",
													"                                    \"items\": {\r",
													"                                        \"type\": \"object\",\r",
													"                                        \"required\": [\"id\", \"timestamp\",\"value\"],\r",
													"                                        \"properties\": {\r",
													"                                            \"id\": {\r",
													"                                                \"type\": \"number\"\r",
													"                                            },\r",
													"                                            \"timestamp\": {\r",
													"                                                \"type\": \"string\"\r",
													"                                            },\r",
													"                                            \"value\": {\r",
													"                                                \"type\": \"array\",\r",
													"                                                \"items\": {\r",
													"                                                    \"type\": \"number\"\r",
													"                                                }\r",
													"                                            }\r",
													"                                        }\r",
													"                                    }\r",
													"                                }\r",
													"                            }\r",
													"                        }\r",
													"                    },\r",
													"                    \"date_start\": {\r",
													"                        \"type\": \"string\"\r",
													"                    },\r",
													"                    \"date_end\": {\r",
													"                        \"type\": \"string\"\r",
													"                    },\r",
													"                    \"time_start\": {\r",
													"                        \"type\": \"string\"\r",
													"                    },\r",
													"                    \"time_end\": {\r",
													"                        \"type\": \"string\"\r",
													"                    },\r",
													"                    \"link\": {\r",
													"                        \"type\": [\"string\", \"null\"] //change\r",
													"                    },\r",
													"                    \"generated\": {\r",
													"                        \"type\": \"number\"\r",
													"                    },\r",
													"                    \"created_at\": {\r",
													"                        \"type\": \"string\"\r",
													"                    },\r",
													"                    \"updated_at\": {\r",
													"                        \"type\": \"string\"\r",
													"                    },\r",
													"                    \"deleted_at\": {\r",
													"                        \"type\": [\"string\", \"null\"]\r",
													"                    }\r",
													"                }\r",
													"            }\r",
													"        },\r",
													"        \"first_page_url\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"from\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"last_page\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"last_page_url\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"next_page_url\": {\r",
													"            \"type\": [\"string\", \"null\"]\r",
													"        },\r",
													"        \"path\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"per_page\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"prev_page_url\": {\r",
													"            \"type\": [\"string\", \"null\"]\r",
													"        },\r",
													"        \"to\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"total\": {\r",
													"            \"type\": \"number\"\r",
													"        }\r",
													"    }\r",
													"};\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
													"    pm.test(`PASS:Obtaining of user report list in a range - Request time is: ${pm.response.responseTime} ms`, () => true);\r",
													"    console.log(`PASS:Obtaining of user report list in a range - Server response time is ${pm.response.responseTime} ms`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL:Obtaining of user report list in a range - Request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL:Obtaining of user report list in a range - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.to.have.status(200));\r",
													"    pm.test(`PASS:Obtaining of user report list in a range - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
													"    console.log(`PASS:Obtaining of user report list in a range - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL:Obtaining of user report list in a range - Server response status is: ${pm.response.code} ${pm.response.status} (Must be 200 OK)`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL:Obtaining of user report list in a range - Server response status is ${pm.response.code} ${pm.response.status} (Must be 200 OK)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"    pm.test(`PASS:Obtaining of user report list in a range - JSON schema is valid`, () => true);\r",
													"    console.log(`PASS:Obtaining of user report list in a range - JSON schema is valid`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL:Obtaining of user report list in a range - JSON schema is not valid`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL:Obtaining of user report list in a range - schema is not valid`);\r",
													"}"
												],
												"type": "text/javascript",
												"id": "2c191a0c-9e3c-4e3b-81ca-2803a610e6ec"
											}
										}
									],
									"id": "68a8a8a6-c973-4968-bb09-6e030b44f8ca",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/report?date_start={{start}}&date_end={{end}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"report"
											],
											"query": [
												{
													"key": "date_start",
													"value": "{{start}}"
												},
												{
													"key": "date_end",
													"value": "{{end}}"
												}
											]
										},
										"description": "GET-запрос **Obtain report list in a range.**\n\nПолучает все отчеты пользователя в заданном временном диапазоне.\n\nПодставляет дату и время, полученную с помощью встроенной функции `moment()`в качестве начального и конечного значений диапазона.\n\nПроизводит валидацию JSON-схемы."
									},
									"response": []
								},
								{
									"name": "Obtain user report list",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Testing obtaining of user report list...\");"
												],
												"type": "text/javascript",
												"id": "f51fd1ba-16da-4d6a-9a0d-477871a1ab17"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"required\": [\"current_page\", \"data\", \"first_page_url\", \"from\", \"last_page\", \"last_page_url\", \"next_page_url\",\"path\", \"per_page\", \"prev_page_url\", \"to\", \"total\"],\r",
													"    \"properties\": {\r",
													"        \"current_page\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"data\": {\r",
													"            \"type\": \"array\",\r",
													"            \"items\": {\r",
													"                \"type\": \"object\",\r",
													"                \"required\": [\"id_user_report\", \"id_user\", \"metrics\", \"date_start\", \"date_end\", \"time_start\", \"time_end\", \"link\", \"generated\", \"created_at\", \"updated_at\", \"deleted_at\"],\r",
													"                \"properties\": {\r",
													"                    \"id_user_report\": {\r",
													"                        \"type\": \"number\"\r",
													"                    },\r",
													"                    \"id_user\": {\r",
													"                        \"type\": \"number\"\r",
													"                    },\r",
													"                    \"metrics\": {\r",
													"                        \"type\": \"array\",\r",
													"                        \"items\": {\r",
													"                            \"type\": \"object\",\r",
													"                            \"required\": [\"id\", \"guid\", \"name\", \"unit\", \"icon\", \"range\", \"items\"],\r",
													"                            \"properties\": {\r",
													"                                \"id\": {\r",
													"                                    \"type\": \"number\"\r",
													"                                },\r",
													"                                \"guid\": {\r",
													"                                    \"type\": \"string\"\r",
													"                                },\r",
													"                                \"name\": {\r",
													"                                    \"type\": [\"string\", \"null\"] //change\r",
													"                                },\r",
													"                                \"unit\": {\r",
													"                                    \"type\": [\"string\", \"null\"] //change\r",
													"                                },\r",
													"                                \"icon\": {\r",
													"                                    \"type\": \"string\"\r",
													"                                },\r",
													"                                \"range\": {\r",
													"                                    \"type\": \"array\",\r",
													"                                    \"items\": {\r",
													"                                        \"type\": \"object\",\r",
													"                                        \"required\": [\"id\", \"max\", \"min\", \"rel\", \"type\"],\r",
													"                                        \"properties\": {\r",
													"                                            \"id\": {\r",
													"                                                \"type\": \"number\"\r",
													"                                            },\r",
													"                                            \"max\": {\r",
													"                                                \"type\": \"number\"\r",
													"                                            },\r",
													"                                            \"min\": {\r",
													"                                                \"type\": \"number\"\r",
													"                                            },\r",
													"                                            \"rel\": {\r",
													"                                                \"type\": \"string\"\r",
													"                                            },\r",
													"                                            \"type\": {\r",
													"                                                \"type\": \"string\"\r",
													"                                            }\r",
													"                                        },\r",
													"                                    },\r",
													"                                },\r",
													"                                \"items\": {\r",
													"                                    \"type\": \"array\",\r",
													"                                    \"items\": {\r",
													"                                        \"type\": \"object\",\r",
													"                                        \"required\": [\"id\", \"timestamp\",\"value\"],\r",
													"                                        \"properties\": {\r",
													"                                            \"id\": {\r",
													"                                                \"type\": \"number\"\r",
													"                                            },\r",
													"                                            \"timestamp\": {\r",
													"                                                \"type\": \"string\"\r",
													"                                            },\r",
													"                                            \"value\": {\r",
													"                                                \"type\": \"array\",\r",
													"                                                \"items\": {\r",
													"                                                    \"type\": \"number\"\r",
													"                                                }\r",
													"                                            }\r",
													"                                        }\r",
													"                                    }\r",
													"                                }\r",
													"                            }\r",
													"                        }\r",
													"                    },\r",
													"                    \"date_start\": {\r",
													"                        \"type\": \"string\"\r",
													"                    },\r",
													"                    \"date_end\": {\r",
													"                        \"type\": \"string\"\r",
													"                    },\r",
													"                    \"time_start\": {\r",
													"                        \"type\": \"string\"\r",
													"                    },\r",
													"                    \"time_end\": {\r",
													"                        \"type\": \"string\"\r",
													"                    },\r",
													"                    \"link\": {\r",
													"                        \"type\": [\"string\", \"null\"] //change\r",
													"                    },\r",
													"                    \"generated\": {\r",
													"                        \"type\": \"number\"\r",
													"                    },\r",
													"                    \"created_at\": {\r",
													"                        \"type\": \"string\"\r",
													"                    },\r",
													"                    \"updated_at\": {\r",
													"                        \"type\": \"string\"\r",
													"                    },\r",
													"                    \"deleted_at\": {\r",
													"                        \"type\": [\"string\", \"null\"]\r",
													"                    }\r",
													"                }\r",
													"            }\r",
													"        },\r",
													"        \"first_page_url\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"from\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"last_page\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"last_page_url\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"next_page_url\": {\r",
													"            \"type\": [\"string\", \"null\"]\r",
													"        },\r",
													"        \"path\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"per_page\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"prev_page_url\": {\r",
													"            \"type\": [\"string\", \"null\"]\r",
													"        },\r",
													"        \"to\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"total\": {\r",
													"            \"type\": \"number\"\r",
													"        }\r",
													"    }\r",
													"};\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
													"    pm.test(`PASS: Obtaining of user report list - Request time is: ${pm.response.responseTime} ms`, () => true);\r",
													"    console.log(`PASS: Obtaining of user report list - Server response time is ${pm.response.responseTime} ms`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of user report list - Request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of user report list - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.to.have.status(200));\r",
													"    pm.test(`PASS: Obtaining of user report list - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
													"    console.log(`PASS: Obtaining of user report list - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of user report list - Server response status is: ${pm.response.code} ${pm.response.status} (Must be 200 OK)`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of user report list - Server response status is ${pm.response.code} ${pm.response.status} (Must be 200 OK)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"    pm.test(`PASS: Obtaining of user report list - JSON schema is valid`, () => true);\r",
													"    console.log(`PASS: Obtaining of user report list - JSON schema is valid`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of user report list - JSON schema is not valid`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of user report list - schema is not valid`);\r",
													"}"
												],
												"type": "text/javascript",
												"id": "90ac6a54-43bf-4a99-95c1-aec7e630b15c"
											}
										}
									],
									"id": "7333f105-9687-4627-9bf4-2b43b20bc887",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/report",
										"description": "GET-запрос **Obtain user report list.**\n\nПолучает все отчеты пользователя.\n\nПроизводит валидацию JSON-схемы."
									},
									"response": []
								},
								{
									"name": "Obtain last user report",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"required\": [\"url\", \"short_url\", \"path\"],\r",
													"    \"properties\": {\r",
													"        \"url\": {\r",
													"            \"type\": \"string\",   \r",
													"        },\r",
													"        \"short_url\": {\r",
													"            \"type\": \"string\",   \r",
													"        },\r",
													"        \"path\": {\r",
													"            \"type\": \"string\",   \r",
													"        },\r",
													"    }  \r",
													"};\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
													"    pm.test(`PASS: Obtaining of last user report - Request time is: ${pm.response.responseTime} ms`, () => true);\r",
													"    console.log(`PASS: Obtaining of last user report - Server response time is ${pm.response.responseTime} ms`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of last user report - Request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of last user report - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.to.have.status(201));\r",
													"    pm.test(`PASS: Obtaining of last user report - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
													"    console.log(`PASS: Obtaining of last user report - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of last user report - Server response status is: ${pm.response.code} ${pm.response.status} (must be 201 OK)`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of last user report - Server response status is ${pm.response.code} ${pm.response.status} (must be 201 OK)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"    pm.test(`PASS: Obtaining of last user report - JSON schema is valid`, () => true);\r",
													"    console.log(`PASS: Obtaining of last user report - JSON schema is valid`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of last user report - JSON schema is not valid`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of last user report - schema is not valid`);\r",
													"}\r",
													"\r",
													"var bodyData = JSON.parse(responseBody);\r",
													"var url = bodyData.url;\r",
													"var short_url = bodyData.short_url;\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: `${url}`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/pdf',\r",
													"        'Content-Type': 'application/pdf'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    try {\r",
													"        pm.expect(res.headers.get('Content-Type')).to.eql('application/pdf');\r",
													"        pm.test(`PASS: Obtaining of last user report - Standard URL Content-Type is PDF`, () => true);\r",
													"        console.log(`PASS: Obtaining of last user report - Standard URL Content-Type is PDF`);\r",
													"    }\r",
													"    catch(e) {\r",
													"        pm.test(`FAIL: Obtaining of last user report - Standard URL Content-Type isn't PDF`, () => {throw new Error(e.message)});\r",
													"        console.log(`FAIL: Obtaining of last user report - Standard URL Content-Type isn't PDF`);\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: `${short_url}`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/pdf',\r",
													"        'Content-Type': 'application/pdf'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    try {\r",
													"        pm.expect(res.headers.get('Content-Type')).to.eql('application/pdf');\r",
													"        pm.test(`PASS: Obtaining of last user report - Short URL Content-Type is PDF`, () => true);\r",
													"        console.log(`PASS: Obtaining of last user report - Short URL Content-Type is PDF`);\r",
													"    }\r",
													"    catch(e) {\r",
													"        pm.test(`FAIL: Obtaining of last user report - Short URL Content-Type isn't PDF`, () => {throw new Error(e.message)});\r",
													"        console.log(`FAIL: Obtaining of last user report - Short URL Content-Type isn't PDF`);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"id": "abc5703e-53f4-4cdd-871d-e5d076d1f2ef"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Testing obtaining of last report...\");\r",
													"\r",
													"const moment = require('moment');\r",
													"pm.collectionVariables.set('start', moment().format(\"YYYY-MM-DD[T]00:00:00\"));\r",
													"pm.collectionVariables.set('end', moment().format(\"YYYY-MM-DD[T]23:59:59\"));"
												],
												"type": "text/javascript",
												"id": "c27b157e-cd1b-40d8-b1df-aeb638175348"
											}
										}
									],
									"id": "3885bc78-24b7-4b79-b1db-d4b35160d4a9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"metrics\": [\r\n        {\r\n            \"name\": \"BodyOxygen\"\r\n        },\r\n        {\r\n            \"name\": \"PulseRate\"\r\n        },\r\n        {\r\n            \"name\": \"BreathingRate\"\r\n        },\r\n        {\r\n            \"name\": \"BodyTemperature\"\r\n        },\r\n        {\r\n            \"name\": \"PrefusionIndex\"\r\n        }\r\n    ],\r\n    \"date_start\": \"{{start}}\",\r\n    \"date_end\": \"{{end}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/report/last",
										"description": "GET-запрос **Obtain last user report** - запрос на получение отчета последних метрик пользователя за заданный промежуток времени.\n\nПодставляет дату и время, полученную с помощью встроенной функции `moment()`в качестве начального и конечного значений диапазона.\n\nПроизводит валидацию полученной JSON-схемы.\n\n``` json\n{\n    \"metrics\": [\n        {\n            \"name\": \"BodyOxygen\"\n        },\n        {\n            \"name\": \"PulseRate\"\n        },\n        {\n            \"name\": \"BreathingRate\"\n        },\n        {\n            \"name\": \"BodyTemperature\"\n        },\n        {\n            \"name\": \"PrefusionIndex\"\n        }\n    ],\n    \"date_start\": \"{{start}}\",\n    \"date_end\": \"{{end}}\"\n}\n```"
									},
									"response": []
								}
							],
							"id": "0ccf4959-5054-46b3-a4d7-d2cb6816cabb",
							"description": "> Набор запросов получения списка пользовательских отчетов\n\n**Obtain a specific custom user report** - запрос на получение определенного пользовательского отчета по его id.\n\n**Obtain report list in a range** - запрос на получение списка отчетов в заданном временном промежутке\n\n**Obtain user report list** - запрос на получение полного списка пользовательских отчетов.\n\n**Obtain last user report** - запрос на получение отчета последних метрик пользователя за заданный промежуток времени.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "3417cbe1-3133-4083-9b21-3b254e2ab02c"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "85c62702-30b1-412b-9e7a-4b33ccedc7bb"
									}
								}
							]
						}
					],
					"id": "156aca4f-8734-4735-a6c0-e565562b59af",
					"description": "> Набор тестов пользовательских отчетов\n\n**Create report** - содержит запрос для тестирования функции создания пользовательского отчета.\n\n**Read report** \\- содержит запросы для тестирования функции получения списка отчетов пользователя.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "54d0d091-34af-4b98-81ee-ca5921a09f2a"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "449090ad-fc27-4752-91b7-91d9df31c85e"
							}
						}
					]
				},
				{
					"name": "Tests",
					"item": [
						{
							"name": "Read template",
							"item": [
								{
									"name": "Obtain templates list",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Testing obtaining of templates list...\");"
												],
												"type": "text/javascript",
												"id": "0780c996-5564-4636-8b16-5ee719d059ab"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"required\": [\"current_page\", \"data\", \"first_page_url\", \"from\", \"last_page\", \"last_page_url\", \"next_page_url\", \"path\", \"per_page\", \"prev_page_url\", \"to\", \"total\"],\r",
													"    \"properties\": {\r",
													"        \"current_page\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"data\": {\r",
													"            \"type\": \"array\",\r",
													"            \"items\": {\r",
													"                \"type\": \"object\",\r",
													"                \"required\": [\"id\", \"code\", \"title\", \"description\", \"created_at\"],\r",
													"                \"properties\": {\r",
													"                    \"id\": {\r",
													"                        \"type\": \"number\"\r",
													"                    },\r",
													"                    \"code\": {\r",
													"                        \"type\": \"string\"\r",
													"                    },\r",
													"                    \"title\": {\r",
													"                        \"type\": \"string\"\r",
													"                    },\r",
													"                    \"description\": {\r",
													"                        \"type\": \"string\"\r",
													"                    },\r",
													"                    \"created_at\": {\r",
													"                        \"type\": \"string\"\r",
													"                    }\r",
													"                }\r",
													"            }\r",
													"        },\r",
													"        \"first_page_url\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"from\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"last_page\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"last_page_url\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"next_page_url\": {\r",
													"            \"type\": [\"string\", \"null\"]\r",
													"        },\r",
													"        \"path\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"per_page\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"prev_page_url\": {\r",
													"            \"type\": [\"string\", \"null\"]\r",
													"        },\r",
													"        \"to\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"total\": {\r",
													"            \"type\": \"number\"\r",
													"        }\r",
													"    }\r",
													"};\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
													"    pm.test(`PASS: Obtaining of templates list - request time is: ${pm.response.responseTime} ms`, () => true);\r",
													"    console.log(`PASS: Obtaining of templates list - Server response time is ${pm.response.responseTime} ms`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of templates list - request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of templates list - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.to.have.status(200));\r",
													"    pm.test(`PASS: Obtaining of templates list - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
													"    console.log(`PASS: Obtaining of templates list - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of templates list - Server response status is: ${pm.response.code} ${pm.response.status} (must be 200 OK)`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of templates list - Server response status is ${pm.response.code} ${pm.response.status} (must be 200 OK)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"    pm.test(`PASS: Obtaining of templates list - JSON schema is valid`, () => true);\r",
													"    console.log(`PASS: Obtaining of templates list - JSON schema is valid`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of templates list - JSON schema is not valid`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of templates list - schema is not valid`);\r",
													"}"
												],
												"type": "text/javascript",
												"id": "940da47e-09fd-46b2-889a-fb07b69e2441"
											}
										}
									],
									"id": "126b69f2-ccd5-4ddc-95f6-542074110064",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/test/template",
										"description": "GET-запрос **Obtain template list.**\n\nПолучает список шаблонов тестов.\n\nПроизводит валидацию JSON-схемы."
									},
									"response": []
								},
								{
									"name": "Obtain a specific template",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Testing obtaining of a specific template...\");"
												],
												"type": "text/javascript",
												"id": "7becd693-de9f-494f-83c7-28f76bbce452"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"required\": [\"id\", \"code\", \"type\", \"variant\", \"title\", \"description\", \"info\", \"user_id\", \"active\", \"created_at\", \"updated_at\", \"actions\"],\r",
													"    \"properties\": {\r",
													"        \"id\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"code\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"type\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"variant\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"title\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"description\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"info\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"user_id\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"active\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"created_at\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"updated_at\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"actions\": {\r",
													"            \"type\": \"array\",\r",
													"            \"items\": {\r",
													"                \"type\": \"object\",\r",
													"                \"required\": [\"id\", \"name\", \"title\", \"alias\", \"sort\", \"code\", \"option\"],\r",
													"                \"properties\": {\r",
													"                    \"id\": {\r",
													"                        \"type\": \"number\"\r",
													"                    },\r",
													"                    \"type\": {\r",
													"                        \"type\": \"number\"\r",
													"                    },\r",
													"                    \"name\": {\r",
													"                        \"type\": \"string\"\r",
													"                    },\r",
													"                    \"header\": {\r",
													"                        \"type\": \"string\"\r",
													"                    },\r",
													"                    \"title\": {\r",
													"                        \"type\": \"string\"\r",
													"                    },\r",
													"                    \"description\": {\r",
													"                        \"type\": \"string\"\r",
													"                    },\r",
													"                    \"alias\": {\r",
													"                        \"type\": \"string\"\r",
													"                    },\r",
													"                    \"sort\": {\r",
													"                        \"type\": \"number\"\r",
													"                    },\r",
													"                    \"code\": {\r",
													"                        \"type\": \"string\"\r",
													"                    },\r",
													"                    \"option\": {\r",
													"                        \"type\": \"object\",\r",
													"                        \"required\": [\"texts\"],\r",
													"                        \"properties\": {\r",
													"                            \"execution\": {\r",
													"                                \"type\": \"number\"\r",
													"                            },\r",
													"                            \"audio\": {\r",
													"                                \"type\": \"null\"\r",
													"                            },\r",
													"                            \"text\": {\r",
													"                                \"type\": \"number\"\r",
													"                            },\r",
													"                            \"gyroscope\": {\r",
													"                                \"type\": \"boolean\"\r",
													"                            },\r",
													"                            \"data\": {\r",
													"                                \"type\": \"array\",\r",
													"                                \"items\": {\r",
													"                                    \"type\": \"object\",\r",
													"                                    \"properties\": {\r",
													"                                        \"label\": {\r",
													"                                            \"type\": \"string\"\r",
													"                                        },\r",
													"                                        \"style\": {\r",
													"                                            \"type\": \"string\"\r",
													"                                        },\r",
													"                                        \"source\": {\r",
													"                                            \"type\": \"string\"\r",
													"                                        }\r",
													"                                    }\r",
													"                                }\r",
													"                            },\r",
													"                            \"texts\": {\r",
													"                                \"type\": \"array\"\r",
													"                            }\r",
													"                        }\r",
													"                    }\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"    }\r",
													"};\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
													"    pm.test(`PASS: Obtaining of a specific template - request time is: ${pm.response.responseTime} ms`, () => true);\r",
													"    console.log(`PASS: Obtaining of a specific template - Server response time is ${pm.response.responseTime} ms`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of a specific template - request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of a specific template - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.to.have.status(200));\r",
													"    pm.test(`PASS: Obtaining of a specific template - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
													"    console.log(`PASS: Obtaining of a specific template - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of a specific template - Server response status is: ${pm.response.code} ${pm.response.status} (must be 200 OK)`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of a specific template - Server response status is ${pm.response.code} ${pm.response.status} (must be 200 OK)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"    pm.test(`PASS: Obtaining of a specific template - JSON schema is valid`, () => true);\r",
													"    console.log(`PASS: Obtaining of a specific template - JSON schema is valid`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of a specific template - JSON schema is not valid`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of a specific template - schema is not valid`);\r",
													"}"
												],
												"type": "text/javascript",
												"id": "b2d83caa-6101-4988-a422-34ae9fd94cfb"
											}
										}
									],
									"id": "777730cc-ea71-43a8-920f-521ec8ae641f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/test/template/1",
										"description": "GET-запрос **Obtain a specific template.**\n\nПолучает конкретный шаблон теста по его id.\n\nПроизводит валидацию JSON-схемы."
									},
									"response": []
								}
							],
							"id": "11165403-900f-4a4a-b0b8-a096737ff615",
							"description": "> Набор запросов тестирования чтения шаблонов тестов\n\nObtain template list - запрос на получение списка шаблонов тестов.\n\nObtain a specific template - запрос на получение конкретного шаблона теста по его id."
						},
						{
							"name": "Create tests",
							"item": [
								{
									"name": "Add new Martine test template",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Testing adding Martine test template...\");"
												],
												"type": "text/javascript",
												"id": "b4e62226-8b1d-4e52-b078-308b97eb62ed"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"required\": [\"id\"],\r",
													"    \"properties\": {\r",
													"        \"id_test\": {\r",
													"            \"id\": \"number\"\r",
													"        }\r",
													"    }\r",
													"};\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
													"    pm.test(`PASS: Adding a Martine test template - request time is: ${pm.response.responseTime} ms`, () => true);\r",
													"    console.log(`PASS: Adding a Martine test template - Server response time is ${pm.response.responseTime} ms`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Adding a Martine test template - request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Adding a Martine test template - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.to.have.status(201));\r",
													"    pm.test(`PASS: Adding a Martine test template - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
													"    console.log(`PASS: Adding a Martine test template - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Adding a Martine test template - Server response status is: ${pm.response.code} ${pm.response.status} (must be 201 Created)`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Adding a Martine test template - Server response status is ${pm.response.code} ${pm.response.status} (must be 201 Created)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"    pm.test(`PASS: Adding a Martine test template - JSON schema is valid`, () => true);\r",
													"    console.log(`PASS: Adding a Martine test template - JSON schema is valid`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Adding a Martine test template - JSON schema is not valid`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Adding a Martine test template - schema is not valid`);\r",
													"}\r",
													"\r",
													"var bodyData = JSON.parse(responseBody);\r",
													"var id_test = bodyData.id;\r",
													"pm.collectionVariables.set(\"id_test\", id_test);"
												],
												"type": "text/javascript",
												"id": "f5bf9e22-f537-4fa2-a6fd-31b5293112be"
											}
										}
									],
									"id": "54ab6c1f-1b1e-4e86-99fa-0cff76c833c7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"url": "{{baseURL}}/test/template/1"
									},
									"response": []
								},
								{
									"name": "Add Martine test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Testing adding Martine test...\");"
												],
												"type": "text/javascript",
												"id": "09d5abbf-c158-4c76-b0e1-98edcdcb285b"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"required\": [\"id_test\", \"id_user\", \"id_test_template\", \"done\", \"created_at\", \"updated_at\"],\r",
													"    \"properties\": {\r",
													"        \"id_test\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"id_user\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"id_test_template\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"done\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"created_at\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"updated_at\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    }\r",
													"};\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
													"    pm.test(`PASS: Adding a Martine test - request time is: ${pm.response.responseTime} ms`, () => true);\r",
													"    console.log(`PASS: Adding a Martine test - Server response time is ${pm.response.responseTime} ms`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Adding a Martine test - request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Adding a Martine test - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.to.have.status(201));\r",
													"    pm.test(`PASS: Adding a Martine test - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
													"    console.log(`PASS: Adding a Martine test - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Adding a Martine test - Server response status is: ${pm.response.code} ${pm.response.status} (must be 201 Created)`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Adding a Martine test - Server response status is ${pm.response.code} ${pm.response.status} (must be 201 Created)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"    pm.test(`PASS: Adding a Martine test - JSON schema is valid`, () => true);\r",
													"    console.log(`PASS: Adding a Martine test - JSON schema is valid`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Adding a Martine test - JSON schema is not valid`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Adding a Martine test - schema is not valid`);\r",
													"}"
												],
												"type": "text/javascript",
												"id": "c460e4ef-5236-4410-97a4-83d859745288"
											}
										}
									],
									"id": "728676e0-3917-4ebc-8169-ae932a03a1df",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\r\n    {\r\n        \"alias\": \"desc\",\r\n        \"type\": \"OPEN\",\r\n        \"timestamp\": \"2021-12-27T12:45:34+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    },\r\n    {\r\n        \"alias\": \"desc\",\r\n        \"type\": \"CLOSE\",\r\n        \"timestamp\": \"2021-12-27T12:45:35+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    },\r\n    {\r\n        \"alias\": \"face1\",\r\n        \"type\": \"OPEN\",\r\n        \"timestamp\": \"2021-12-27T12:45:35+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    },\r\n    {\r\n        \"alias\": \"face1\",\r\n        \"type\": \"ACTION_BEGIN\",\r\n        \"timestamp\": \"2021-12-27T12:45:36+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    },\r\n    {\r\n        \"alias\": \"face1\",\r\n        \"type\": \"ACTION_COMPLETE\",\r\n        \"timestamp\": \"2021-12-27T12:48:08+0000\",\r\n        \"tags\": [\r\n            \"screen\",\r\n            \"parameter\"\r\n        ],\r\n        \"data\": {\r\n            \"parameters\": [\r\n                {\r\n                    \"name\": \"LongBodyOxygen\",\r\n                    \"device\": \"binah/face\",\r\n                    \"timestamp\": \"2021-12-27T12:46:36+0000\",\r\n                    \"value\": 98,\r\n                    \"waveform\": []\r\n                },\r\n                {\r\n                    \"name\": \"LongPulseRate\",\r\n                    \"device\": \"binah/face\",\r\n                    \"timestamp\": \"2021-12-27T12:46:36+0000\",\r\n                    \"value\": 64,\r\n                    \"waveform\": []\r\n                },\r\n                {\r\n                    \"name\": \"LongBreathingRate\",\r\n                    \"device\": \"binah/face\",\r\n                    \"timestamp\": \"2021-12-27T12:46:36+0000\",\r\n                    \"value\": {\r\n                        \"min\": 8,\r\n                        \"max\": 13,\r\n                        \"avg\": 10\r\n                    },\r\n                    \"waveform\": []\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    {\r\n        \"alias\": \"face1\",\r\n        \"type\": \"CLOSE\",\r\n        \"timestamp\": \"2021-12-27T12:46:36+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    },\r\n    {\r\n        \"alias\": \"sitting\",\r\n        \"type\": \"OPEN\",\r\n        \"timestamp\": \"2021-12-27T12:46:36+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    },\r\n    {\r\n        \"alias\": \"sitting\",\r\n        \"type\": \"ACTION_COMPLETE\",\r\n        \"timestamp\": \"2021-12-27T12:46:36+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    },\r\n    {\r\n        \"alias\": \"sitting\",\r\n        \"type\": \"CLOSE\",\r\n        \"timestamp\": \"2021-12-27T12:46:36+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    },\r\n    {\r\n        \"alias\": \"face2\",\r\n        \"type\": \"OPEN\",\r\n        \"timestamp\": \"2021-12-27T12:45:35+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    },\r\n    {\r\n        \"alias\": \"face2\",\r\n        \"type\": \"ACTION_BEGIN\",\r\n        \"timestamp\": \"2021-12-27T12:45:36+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    },\r\n    {\r\n        \"alias\": \"face2\",\r\n        \"type\": \"ACTION_COMPLETE\",\r\n        \"timestamp\": \"2021-12-27T12:48:08+0000\",\r\n        \"tags\": [\r\n            \"screen\",\r\n            \"parameter\"\r\n        ],\r\n        \"data\": {\r\n            \"parameters\": [\r\n                {\r\n                    \"name\": \"LongBodyOxygen\",\r\n                    \"device\": \"binah/face\",\r\n                    \"timestamp\": \"2021-12-27T12:46:36+0000\",\r\n                    \"value\": 98,\r\n                    \"waveform\": []\r\n                },\r\n                {\r\n                    \"name\": \"LongPulseRate\",\r\n                    \"device\": \"binah/face\",\r\n                    \"timestamp\": \"2021-12-27T12:46:36+0000\",\r\n                    \"value\": 64,\r\n                    \"waveform\": []\r\n                },\r\n                {\r\n                    \"name\": \"LongBreathingRate\",\r\n                    \"device\": \"binah/face\",\r\n                    \"timestamp\": \"2021-12-27T12:46:36+0000\",\r\n                    \"value\": 10,\r\n                    \"waveform\": []\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    {\r\n        \"alias\": \"face2\",\r\n        \"type\": \"CLOSE\",\r\n        \"timestamp\": \"2021-12-27T12:46:36+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    },\r\n    {\r\n        \"alias\": \"send\",\r\n        \"type\": \"OPEN\",\r\n        \"timestamp\": \"2021-12-27T12:48:08+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    },\r\n    {\r\n        \"alias\": \"send\",\r\n        \"type\": \"ACTION_COMPLETE\",\r\n        \"timestamp\": \"2021-12-27T12:48:08+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    },\r\n    {\r\n        \"alias\": \"send\",\r\n        \"type\": \"CLOSE\",\r\n        \"timestamp\": \"2021-12-27T12:48:08+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    }\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/test/{{id_test}}"
									},
									"response": []
								},
								{
									"name": "Obtain user Martine test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Testing obtaining of user Martine test...\");"
												],
												"type": "text/javascript",
												"id": "97fcd31c-a3eb-468f-b714-1c53bfaf3659"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    \"title\": \"Root Schema\",\r",
													"    \"required\": [\"data\", \"count\"],\r",
													"    \"properties\": {\r",
													"        \"data\": {\r",
													"            \"type\": \"array\",\r",
													"            \"items\": {\r",
													"                \"type\": \"object\",\r",
													"                \"required\": [\"value\", \"estimation\", \"type\", \"label\"],\r",
													"                \"properties\": {\r",
													"                    \"value\": {\r",
													"                        \"type\": \"number\"\r",
													"                    },\r",
													"                    \"estimation\": {\r",
													"                        \"type\": \"number\"\r",
													"                    },\r",
													"                    \"type\": {\r",
													"                        \"type\": \"string\"\r",
													"                    },\r",
													"                    \"label\": {\r",
													"                        \"type\": \"string\"\r",
													"                    }\r",
													"                }\r",
													"            }\r",
													"        },\r",
													"        \"count\": {\r",
													"            \"type\": \"number\"\r",
													"        }\r",
													"    }\r",
													"};\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
													"    pm.test(`PASS: Obtaining of user Martine test - request time is: ${pm.response.responseTime} ms`, () => true);\r",
													"    console.log(`PASS: Obtaining of user Martine test - Server response time is ${pm.response.responseTime} ms`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of user Martine test - request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of user Martine test - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.to.have.status(200));\r",
													"    pm.test(`PASS: Obtaining of user Martine test - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
													"    console.log(`PASS: Obtaining of user Martine test - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of user Martine test - Server response status is: ${pm.response.code} ${pm.response.status} (must be 200 OK)`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of user Martine test - Server response status is ${pm.response.code} ${pm.response.status} (must be 200 OK)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"    pm.test(`PASS: Obtaining of user Martine test - JSON schema is valid`, () => true);\r",
													"    console.log(`PASS: Obtaining of user Martine test - JSON schema is valid`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of user Martine test - JSON schema is not valid`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of user Martine test - schema is not valid`);\r",
													"}"
												],
												"type": "text/javascript",
												"id": "a68394fd-0612-4b0d-b85b-a397fdf4d5ce"
											}
										}
									],
									"id": "22f1bccb-327a-45ca-b667-30880b82979e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/test/{{id_test}}"
									},
									"response": []
								},
								{
									"name": "Add new Ganche test template",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Testing adding Ganche test template...\");"
												],
												"type": "text/javascript",
												"id": "181da222-6d57-4f5e-8fc7-66b06459eb78"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"required\": [\"id\"],\r",
													"    \"properties\": {\r",
													"        \"id_test\": {\r",
													"            \"id\": \"number\"\r",
													"        }\r",
													"    }\r",
													"};\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
													"    pm.test(`PASS: Adding a Ganche test template - request time is: ${pm.response.responseTime} ms`, () => true);\r",
													"    console.log(`PASS: Adding a Ganche test template - Server response time is ${pm.response.responseTime} ms`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Adding a Ganche test template - request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Adding a Ganche test template - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.to.have.status(201));\r",
													"    pm.test(`PASS: Adding a Ganche test template - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
													"    console.log(`PASS: Adding a Ganche test template - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Adding a Ganche test template - Server response status is: ${pm.response.code} ${pm.response.status} (must be 201 Created)`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Adding a Ganche test template - Server response status is ${pm.response.code} ${pm.response.status} (must be 201 Created)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"    pm.test(`PASS: Adding a Ganche test template - JSON schema is valid`, () => true);\r",
													"    console.log(`PASS: Adding a Ganche test template - JSON schema is valid`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Adding a Ganche test template - JSON schema is not valid`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Adding a Ganche test template - schema is not valid`);\r",
													"}\r",
													"\r",
													"var bodyData = JSON.parse(responseBody);\r",
													"var id_test = bodyData.id;\r",
													"pm.collectionVariables.set(\"id_test\", id_test);"
												],
												"type": "text/javascript",
												"id": "3c240ae5-07fd-4509-971a-d42a96876a6a"
											}
										}
									],
									"id": "39a25098-e16b-41f1-81e1-1e2dc79992c2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"url": "{{baseURL}}/test/template/2"
									},
									"response": []
								},
								{
									"name": "Add Ganche test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Testing adding Ganche test...\");"
												],
												"type": "text/javascript",
												"id": "902f2a52-5aff-44d0-8772-81a3d3fb9296"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"required\": [\"id_test\", \"id_user\", \"id_test_template\", \"done\", \"created_at\", \"updated_at\"],\r",
													"    \"properties\": {\r",
													"        \"id_test\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"id_user\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"id_test_template\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"done\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"created_at\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"updated_at\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    }\r",
													"};\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
													"    pm.test(`PASS: Adding a Ganche test - request time is: ${pm.response.responseTime} ms`, () => true);\r",
													"    console.log(`PASS: Adding a Ganche test - Server response time is ${pm.response.responseTime} ms`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Adding a Ganche test - request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Adding a Ganche test - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.to.have.status(201));\r",
													"    pm.test(`PASS: Adding a Ganche test - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
													"    console.log(`PASS: Adding a Ganche test - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Adding a Ganche test - Server response status is: ${pm.response.code} ${pm.response.status} (must be 201 Created)`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Adding a Ganche test - Server response status is ${pm.response.code} ${pm.response.status} (must be 201 Created)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"    pm.test(`PASS: Adding a Ganche test - JSON schema is valid`, () => true);\r",
													"    console.log(`PASS: Adding a Ganche test - JSON schema is valid`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Adding a Ganche test - JSON schema is not valid`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Adding a Ganche test - schema is not valid`);\r",
													"}"
												],
												"type": "text/javascript",
												"id": "b86d1ce2-8e47-4b87-bcd7-904f4d98ba33"
											}
										}
									],
									"id": "6c52cca6-2594-45b1-83b5-696c647918b8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\r\n    {\r\n        \"alias\": \"desc\",\r\n        \"type\": \"OPEN\",\r\n        \"timestamp\": \"2021-12-27T12:45:34+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    },\r\n    {\r\n        \"alias\": \"desc\",\r\n        \"type\": \"CLOSE\",\r\n        \"timestamp\": \"2021-12-27T12:45:35+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    },\r\n    {\r\n        \"alias\": \"face1\",\r\n        \"type\": \"OPEN\",\r\n        \"timestamp\": \"2021-12-27T12:45:35+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    },\r\n    {\r\n        \"alias\": \"hold1\",\r\n        \"type\": \"ACTION_BEGIN\",\r\n        \"timestamp\": \"2021-12-27T12:45:36+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    },\r\n    {\r\n        \"alias\": \"hold1\",\r\n        \"type\": \"ACTION_COMPLETE\",\r\n        \"timestamp\": \"2021-12-27T12:48:08+0000\",\r\n        \"tags\": [\r\n            \"screen\",\r\n            \"parameter\"\r\n        ],\r\n        \"data\": {\r\n            \"parameters\": [\r\n                {\r\n                    \"name\": \"HoldBreathExhale\",\r\n                    \"device\": \"null\",\r\n                    \"timestamp\": \"2021-12-27T12:46:36+0000\",\r\n                    \"value\": 37,\r\n                    \"waveform\": null\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    {\r\n        \"alias\": \"hold1\",\r\n        \"type\": \"CLOSE\",\r\n        \"timestamp\": \"2021-12-27T12:46:36+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    },\r\n    {\r\n        \"alias\": \"send\",\r\n        \"type\": \"OPEN\",\r\n        \"timestamp\": \"2021-12-27T12:48:08+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    },\r\n    {\r\n        \"alias\": \"send\",\r\n        \"type\": \"ACTION_COMPLETE\",\r\n        \"timestamp\": \"2021-12-27T12:48:08+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    },\r\n    {\r\n        \"alias\": \"send\",\r\n        \"type\": \"CLOSE\",\r\n        \"timestamp\": \"2021-12-27T12:48:08+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    }\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/test/{{id_test}}"
									},
									"response": []
								},
								{
									"name": "Obtain user Ganche test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Testing obtaining of user Ganche test...\");"
												],
												"type": "text/javascript",
												"id": "25d48e75-6977-4537-adab-3e590d6bd7fc"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    \"title\": \"Root Schema\",\r",
													"    \"required\": [\"data\", \"count\"],\r",
													"    \"properties\": {\r",
													"        \"data\": {\r",
													"            \"type\": \"array\",\r",
													"            \"items\": {\r",
													"                \"type\": \"object\",\r",
													"                \"required\": [\"value\", \"estimation\", \"type\", \"label\"],\r",
													"                \"properties\": {\r",
													"                    \"value\": {\r",
													"                        \"type\": \"number\"\r",
													"                    },\r",
													"                    \"estimation\": {\r",
													"                        \"type\": \"number\"\r",
													"                    },\r",
													"                    \"type\": {\r",
													"                        \"type\": \"string\"\r",
													"                    },\r",
													"                    \"label\": {\r",
													"                        \"type\": \"string\"\r",
													"                    }\r",
													"                }\r",
													"            }\r",
													"        },\r",
													"        \"count\": {\r",
													"            \"type\": \"number\"\r",
													"        }\r",
													"    }\r",
													"};\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
													"    pm.test(`PASS: Obtaining of user Ganche test - request time is: ${pm.response.responseTime} ms`, () => true);\r",
													"    console.log(`PASS: Obtaining of user Ganche test - Server response time is ${pm.response.responseTime} ms`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of user Ganche test - request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of user Ganche test - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.to.have.status(200));\r",
													"    pm.test(`PASS: Obtaining of user Ganche test - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
													"    console.log(`PASS: Obtaining of user Ganche test - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of user Ganche test - Server response status is: ${pm.response.code} ${pm.response.status} (must be 200 OK)`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of user Ganche test - Server response status is ${pm.response.code} ${pm.response.status} (must be 200 OK)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"    pm.test(`PASS: Obtaining of user Ganche test - JSON schema is valid`, () => true);\r",
													"    console.log(`PASS: Obtaining of user Ganche test - JSON schema is valid`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of user Ganche test - JSON schema is not valid`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of user Ganche test - schema is not valid`);\r",
													"}"
												],
												"type": "text/javascript",
												"id": "c77a13d5-0b0a-4e23-8a47-593d0142f854"
											}
										}
									],
									"id": "7dba079f-8077-4c24-a315-1662bfc2358b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/test/{{id_test}}"
									},
									"response": []
								},
								{
									"name": "Add new Shtange test template",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Testing adding Shtange test template...\");"
												],
												"type": "text/javascript",
												"id": "655302db-d5db-4dbc-95f7-fc7b7c0aad29"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"required\": [\"id\"],\r",
													"    \"properties\": {\r",
													"        \"id_test\": {\r",
													"            \"id\": \"number\"\r",
													"        }\r",
													"    }\r",
													"};\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
													"    pm.test(`PASS: Adding a Shtange test template - request time is: ${pm.response.responseTime} ms`, () => true);\r",
													"    console.log(`PASS: Adding a Shtange test template - Server response time is ${pm.response.responseTime} ms`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Adding a Shtange test template - request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Adding a Shtange test template - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.to.have.status(201));\r",
													"    pm.test(`PASS: Adding a Shtange test template - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
													"    console.log(`PASS: Adding a Shtange test template - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Adding a Shtange test template - Server response status is: ${pm.response.code} ${pm.response.status} (must be 201 Created)`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Adding a Shtange test template - Server response status is ${pm.response.code} ${pm.response.status} (must be 201 Created)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"    pm.test(`PASS: Adding a Shtange test template - JSON schema is valid`, () => true);\r",
													"    console.log(`PASS: Adding a Shtange test template - JSON schema is valid`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Adding a Shtange test template - JSON schema is not valid`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Adding a Shtange test template - schema is not valid`);\r",
													"}\r",
													"\r",
													"var bodyData = JSON.parse(responseBody);\r",
													"var id_test = bodyData.id;\r",
													"pm.collectionVariables.set(\"id_test\", id_test);"
												],
												"type": "text/javascript",
												"id": "c5b6a0db-a504-4923-938f-275f00f57024"
											}
										}
									],
									"id": "0dd3b685-e321-43f2-a4a1-4c095c7a2956",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"url": "{{baseURL}}/test/template/7"
									},
									"response": []
								},
								{
									"name": "Add Shtange test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Testing adding Shtange test...\");"
												],
												"type": "text/javascript",
												"id": "d78338ed-fbe1-4195-9750-52accf668ade"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"required\": [\"id_test\", \"id_user\", \"id_test_template\", \"done\", \"created_at\", \"updated_at\"],\r",
													"    \"properties\": {\r",
													"        \"id_test\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"id_user\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"id_test_template\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"done\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"created_at\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"updated_at\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    }\r",
													"};\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
													"    pm.test(`PASS: Adding a Shtange test - request time is: ${pm.response.responseTime} ms`, () => true);\r",
													"    console.log(`PASS: Adding a Shtange test - Server response time is ${pm.response.responseTime} ms`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Adding a Shtange test - request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Adding a Shtange test - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.to.have.status(201));\r",
													"    pm.test(`PASS: Adding a Shtange test - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
													"    console.log(`PASS: Adding a Shtange test - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Adding a Shtange test - Server response status is: ${pm.response.code} ${pm.response.status} (must be 201 Created)`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Adding a Shtange test - Server response status is ${pm.response.code} ${pm.response.status} (must be 201 Created)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"    pm.test(`PASS: Adding a Shtange test - JSON schema is valid`, () => true);\r",
													"    console.log(`PASS: Adding a Shtange test - JSON schema is valid`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Adding a Shtange test - JSON schema is not valid`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Adding a Shtange test - schema is not valid`);\r",
													"}"
												],
												"type": "text/javascript",
												"id": "804d5237-0f67-4677-99b7-422ffe74ce48"
											}
										}
									],
									"id": "9f4e46d0-fd38-411b-859a-f474ba77b65a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\r\n    {\r\n        \"alias\": \"desc\",\r\n        \"type\": \"OPEN\",\r\n        \"timestamp\": \"2021-12-27T12:45:34+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    },\r\n    {\r\n        \"alias\": \"desc\",\r\n        \"type\": \"CLOSE\",\r\n        \"timestamp\": \"2021-12-27T12:45:35+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    },\r\n    {\r\n        \"alias\": \"face1\",\r\n        \"type\": \"OPEN\",\r\n        \"timestamp\": \"2021-12-27T12:45:35+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    },\r\n    {\r\n        \"alias\": \"hold1\",\r\n        \"type\": \"ACTION_BEGIN\",\r\n        \"timestamp\": \"2021-12-27T12:45:36+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    },\r\n    {\r\n        \"alias\": \"hold1\",\r\n        \"type\": \"ACTION_COMPLETE\",\r\n        \"timestamp\": \"2021-12-27T12:48:08+0000\",\r\n        \"tags\": [\r\n            \"screen\",\r\n            \"parameter\"\r\n        ],\r\n        \"data\": {\r\n            \"parameters\": [\r\n                {\r\n                    \"name\": \"BreathHold\",\r\n                    \"device\": \"null\",\r\n                    \"timestamp\": \"2021-12-27T12:46:36+0000\",\r\n                    \"value\": 41,\r\n                    \"waveform\": null\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    {\r\n        \"alias\": \"hold1\",\r\n        \"type\": \"CLOSE\",\r\n        \"timestamp\": \"2021-12-27T12:46:36+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    },\r\n    {\r\n        \"alias\": \"send\",\r\n        \"type\": \"OPEN\",\r\n        \"timestamp\": \"2021-12-27T12:48:08+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    },\r\n    {\r\n        \"alias\": \"send\",\r\n        \"type\": \"ACTION_COMPLETE\",\r\n        \"timestamp\": \"2021-12-27T12:48:08+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    },\r\n    {\r\n        \"alias\": \"send\",\r\n        \"type\": \"CLOSE\",\r\n        \"timestamp\": \"2021-12-27T12:48:08+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    }\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/test/{{id_test}}"
									},
									"response": []
								},
								{
									"name": "Obtain user Shtange test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Testing obtaining of user Shtange test...\");"
												],
												"type": "text/javascript",
												"id": "da436df8-6257-4a12-b2f9-8e1ee1b737e0"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    \"title\": \"Root Schema\",\r",
													"    \"required\": [\"data\", \"count\"],\r",
													"    \"properties\": {\r",
													"        \"data\": {\r",
													"            \"type\": \"array\",\r",
													"            \"items\": {\r",
													"                \"type\": \"object\",\r",
													"                \"required\": [\"value\", \"estimation\", \"type\", \"label\"],\r",
													"                \"properties\": {\r",
													"                    \"value\": {\r",
													"                        \"type\": \"number\"\r",
													"                    },\r",
													"                    \"estimation\": {\r",
													"                        \"type\": \"number\"\r",
													"                    },\r",
													"                    \"type\": {\r",
													"                        \"type\": \"string\"\r",
													"                    },\r",
													"                    \"label\": {\r",
													"                        \"type\": \"string\"\r",
													"                    }\r",
													"                }\r",
													"            }\r",
													"        },\r",
													"        \"count\": {\r",
													"            \"type\": \"number\"\r",
													"        }\r",
													"    }\r",
													"};\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
													"    pm.test(`PASS: Obtaining of user Shtange test - request time is: ${pm.response.responseTime} ms`, () => true);\r",
													"    console.log(`PASS: Obtaining of user Shtange test - Server response time is ${pm.response.responseTime} ms`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of user Shtange test - request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of user Shtange test - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.to.have.status(200));\r",
													"    pm.test(`PASS: Obtaining of user Shtange test - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
													"    console.log(`PASS: Obtaining of user Shtange test - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of user Shtange test - Server response status is: ${pm.response.code} ${pm.response.status} (must be 200 OK)`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of user Shtange test - Server response status is ${pm.response.code} ${pm.response.status} (must be 200 OK)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"    pm.test(`PASS: Obtaining of user Shtange test - JSON schema is valid`, () => true);\r",
													"    console.log(`PASS: Obtaining of user Shtange test - JSON schema is valid`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of user Shtange test - JSON schema is not valid`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of user Shtange test - schema is not valid`);\r",
													"}"
												],
												"type": "text/javascript",
												"id": "e22652fb-c9f8-4cc9-ac23-974ba2030fd3"
											}
										}
									],
									"id": "038bf7b0-d6ca-4521-a32f-6f1d666be788",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/test/{{id_test}}"
									},
									"response": []
								},
								{
									"name": "Add new Shtange R test template",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Testing adding Shtange R test template...\");"
												],
												"type": "text/javascript",
												"id": "7cb72673-6f92-4968-99b5-b83376ae4800"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"required\": [\"id\"],\r",
													"    \"properties\": {\r",
													"        \"id_test\": {\r",
													"            \"id\": \"number\"\r",
													"        }\r",
													"    }\r",
													"};\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
													"    pm.test(`PASS: Adding a Shtange R test template - request time is: ${pm.response.responseTime} ms`, () => true);\r",
													"    console.log(`PASS: Adding a Shtange R test template - Server response time is ${pm.response.responseTime} ms`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Adding a Shtange R test template - request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Adding a Shtange R test template - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.to.have.status(201));\r",
													"    pm.test(`PASS: Adding a Shtange R test template - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
													"    console.log(`PASS: Adding a Shtange R test template - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Adding a Shtange R test template - Server response status is: ${pm.response.code} ${pm.response.status} (must be 201 Created)`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Adding a Shtange R test template - Server response status is ${pm.response.code} ${pm.response.status} (must be 201 Created)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"    pm.test(`PASS: Adding a Shtange R test template - JSON schema is valid`, () => true);\r",
													"    console.log(`PASS: Adding a Shtange R test template - JSON schema is valid`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Adding a Shtange R test template - JSON schema is not valid`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Adding a Shtange R test template - schema is not valid`);\r",
													"}\r",
													"\r",
													"var bodyData = JSON.parse(responseBody);\r",
													"var id_test = bodyData.id;\r",
													"pm.collectionVariables.set(\"id_test\", id_test);"
												],
												"type": "text/javascript",
												"id": "2e1174a8-c8f3-4382-8a70-fc1331262e21"
											}
										}
									],
									"id": "a7d4fe9e-5666-4671-9720-455452f54e48",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"url": "{{baseURL}}/test/template/8"
									},
									"response": []
								},
								{
									"name": "Add Shtange R test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Testing adding Shtange R test...\");"
												],
												"type": "text/javascript",
												"id": "1036e83e-a850-4eb1-9084-2ec4eb485ac9"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"required\": [\"id_test\", \"id_user\", \"id_test_template\", \"done\", \"created_at\", \"updated_at\"],\r",
													"    \"properties\": {\r",
													"        \"id_test\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"id_user\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"id_test_template\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"done\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"created_at\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"updated_at\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    }\r",
													"};\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
													"    pm.test(`PASS: Adding a Shtange R test - request time is: ${pm.response.responseTime} ms`, () => true);\r",
													"    console.log(`PASS: Adding a Shtange R test - Server response time is ${pm.response.responseTime} ms`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Adding a Shtange R test - request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Adding a Shtange R test - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.to.have.status(201));\r",
													"    pm.test(`PASS: Adding a Shtange R test - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
													"    console.log(`PASS: Adding a Shtange R test - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Adding a Shtange R test - Server response status is: ${pm.response.code} ${pm.response.status} (must be 201 Created)`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Adding a Shtange R test - Server response status is ${pm.response.code} ${pm.response.status} (must be 201 Created)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"    pm.test(`PASS: Adding a Shtange R test - JSON schema is valid`, () => true);\r",
													"    console.log(`PASS: Adding a Shtange R test - JSON schema is valid`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Adding a Shtange R test - JSON schema is not valid`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Adding a Shtange R test - schema is not valid`);\r",
													"}"
												],
												"type": "text/javascript",
												"id": "5c793cd6-e432-4702-9744-c4a7c7d9d5e9"
											}
										}
									],
									"id": "cdc0c510-7d19-4a8e-ba8e-49c8b22fe69e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\r\n    {\r\n        \"alias\": \"desc\",\r\n        \"type\": \"OPEN\",\r\n        \"timestamp\": \"2021-12-27T12:45:34+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    },\r\n    {\r\n        \"alias\": \"desc\",\r\n        \"type\": \"CLOSE\",\r\n        \"timestamp\": \"2021-12-27T12:45:35+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    },\r\n    {\r\n        \"alias\": \"face1\",\r\n        \"type\": \"OPEN\",\r\n        \"timestamp\": \"2021-12-27T12:45:35+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    },\r\n    {\r\n        \"alias\": \"hold1\",\r\n        \"type\": \"ACTION_BEGIN\",\r\n        \"timestamp\": \"2021-12-27T12:45:36+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    },\r\n    {\r\n        \"alias\": \"hold1\",\r\n        \"type\": \"ACTION_COMPLETE\",\r\n        \"timestamp\": \"2021-12-27T12:48:08+0000\",\r\n        \"tags\": [\r\n            \"screen\",\r\n            \"parameter\"\r\n        ],\r\n        \"data\": {\r\n            \"parameters\": [\r\n                {\r\n                    \"name\": \"PulseRate\",\r\n                    \"device\": \"null\",\r\n                    \"timestamp\": \"2021-12-27T12:46:36+0000\",\r\n                    \"value\": 61,\r\n                    \"waveform\": null\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    {\r\n        \"alias\": \"hold1\",\r\n        \"type\": \"CLOSE\",\r\n        \"timestamp\": \"2021-12-27T12:46:36+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    },\r\n    {\r\n        \"alias\": \"hold2\",\r\n        \"type\": \"ACTION_BEGIN\",\r\n        \"timestamp\": \"2021-12-27T12:45:36+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    },\r\n    {\r\n        \"alias\": \"hold2\",\r\n        \"type\": \"ACTION_COMPLETE\",\r\n        \"timestamp\": \"2021-12-27T12:48:08+0000\",\r\n        \"tags\": [\r\n            \"screen\",\r\n            \"parameter\"\r\n        ],\r\n        \"data\": {\r\n            \"parameters\": [\r\n                {\r\n                    \"name\": \"PulseRate\",\r\n                    \"device\": \"null\",\r\n                    \"timestamp\": \"2021-12-27T12:47:36+0000\",\r\n                    \"value\": 65,\r\n                    \"waveform\": null\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    {\r\n        \"alias\": \"hold2\",\r\n        \"type\": \"CLOSE\",\r\n        \"timestamp\": \"2021-12-27T12:46:36+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    },\r\n    {\r\n        \"alias\": \"send\",\r\n        \"type\": \"OPEN\",\r\n        \"timestamp\": \"2021-12-27T12:48:08+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    },\r\n    {\r\n        \"alias\": \"send\",\r\n        \"type\": \"ACTION_COMPLETE\",\r\n        \"timestamp\": \"2021-12-27T12:48:08+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    },\r\n    {\r\n        \"alias\": \"send\",\r\n        \"type\": \"CLOSE\",\r\n        \"timestamp\": \"2021-12-27T12:48:08+0000\",\r\n        \"tags\": [\r\n            \"screen\"\r\n        ],\r\n        \"data\": {}\r\n    }\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/test/{{id_test}}"
									},
									"response": []
								},
								{
									"name": "Obtain user Shtange R test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Testing obtaining of user Shtange R test...\");"
												],
												"type": "text/javascript",
												"id": "b4c6b734-aec1-452b-9a05-85b107ef74e2"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    \"title\": \"Root Schema\",\r",
													"    \"required\": [\"data\", \"count\"],\r",
													"    \"properties\": {\r",
													"        \"data\": {\r",
													"            \"type\": \"array\",\r",
													"            \"items\": {\r",
													"                \"type\": \"object\",\r",
													"                \"required\": [\"value\", \"estimation\", \"type\", \"label\"],\r",
													"                \"properties\": {\r",
													"                    \"value\": {\r",
													"                        \"type\": \"number\"\r",
													"                    },\r",
													"                    \"estimation\": {\r",
													"                        \"type\": \"number\"\r",
													"                    },\r",
													"                    \"type\": {\r",
													"                        \"type\": \"string\"\r",
													"                    },\r",
													"                    \"label\": {\r",
													"                        \"type\": \"string\"\r",
													"                    }\r",
													"                }\r",
													"            }\r",
													"        },\r",
													"        \"count\": {\r",
													"            \"type\": \"number\"\r",
													"        }\r",
													"    }\r",
													"};\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
													"    pm.test(`PASS: Obtaining of user Shtange R test - request time is: ${pm.response.responseTime} ms`, () => true);\r",
													"    console.log(`PASS: Obtaining of user Shtange R test - Server response time is ${pm.response.responseTime} ms`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of user Shtange R test - request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of user Shtange R test - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.to.have.status(200));\r",
													"    pm.test(`PASS: Obtaining of user Shtange R test - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
													"    console.log(`PASS: Obtaining of user Shtange R test - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of user Shtange R test - Server response status is: ${pm.response.code} ${pm.response.status} (must be 200 OK)`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of user Shtange R test - Server response status is ${pm.response.code} ${pm.response.status} (must be 200 OK)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"    pm.test(`PASS: Obtaining of user Shtange R test - JSON schema is valid`, () => true);\r",
													"    console.log(`PASS: Obtaining of user Shtange R test - JSON schema is valid`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of user Shtange R test - JSON schema is not valid`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of user Shtange R test - schema is not valid`);\r",
													"}"
												],
												"type": "text/javascript",
												"id": "29f2b260-85ed-4f8d-9ad1-3d9e54fcde47"
											}
										}
									],
									"id": "742d9628-d905-4d18-b187-81a91e3522ca",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/test/{{id_test}}"
									},
									"response": []
								},
								{
									"name": "Add new Tepping test template",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Testing adding Tepping test template...\");"
												],
												"type": "text/javascript",
												"id": "21533b81-5cfc-4297-b811-8ff024df1023"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"required\": [\"id\"],\r",
													"    \"properties\": {\r",
													"        \"id_test\": {\r",
													"            \"id\": \"number\"\r",
													"        }\r",
													"    }\r",
													"};\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
													"    pm.test(`PASS: Adding a Tepping test template - request time is: ${pm.response.responseTime} ms`, () => true);\r",
													"    console.log(`PASS: Adding a Tepping test template - Server response time is ${pm.response.responseTime} ms`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Adding a Tepping test template - request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Adding a Tepping test template - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.to.have.status(201));\r",
													"    pm.test(`PASS: Adding a Tepping test template - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
													"    console.log(`PASS: Adding a Tepping test template - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Adding a Tepping test template - Server response status is: ${pm.response.code} ${pm.response.status} (must be 201 Created)`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Adding a Tepping test template - Server response status is ${pm.response.code} ${pm.response.status} (must be 201 Created)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"    pm.test(`PASS: Adding a Tepping test template - JSON schema is valid`, () => true);\r",
													"    console.log(`PASS: Adding a Tepping test template - JSON schema is valid`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Adding a Tepping test template - JSON schema is not valid`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Adding a Tepping test template - schema is not valid`);\r",
													"}\r",
													"\r",
													"var bodyData = JSON.parse(responseBody);\r",
													"var id_test = bodyData.id;\r",
													"pm.collectionVariables.set(\"id_test\", id_test);"
												],
												"type": "text/javascript",
												"id": "2a4f829a-4ce3-4174-8256-9c83682241af"
											}
										}
									],
									"id": "46ea66f1-8e45-4f46-bc6c-d8a067dc2371",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"url": "{{baseURL}}/test/template/9"
									},
									"response": []
								},
								{
									"name": "Add Tepping test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Testing adding Tepping test...\");"
												],
												"type": "text/javascript",
												"id": "c622e2fa-18ee-47d0-bc9f-b59c2027659b"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"required\": [\"id_test\", \"id_user\", \"id_test_template\", \"done\", \"created_at\", \"updated_at\"],\r",
													"    \"properties\": {\r",
													"        \"id_test\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"id_user\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"id_test_template\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"done\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"created_at\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"updated_at\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    }\r",
													"};\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
													"    pm.test(`PASS: Adding a Tepping test - request time is: ${pm.response.responseTime} ms`, () => true);\r",
													"    console.log(`PASS: Adding a Tepping test - Server response time is ${pm.response.responseTime} ms`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Adding a Tepping test - request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Adding a Tepping test - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.to.have.status(201));\r",
													"    pm.test(`PASS: Adding a Tepping test - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
													"    console.log(`PASS: Adding a Tepping test - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Adding a Tepping test - Server response status is: ${pm.response.code} ${pm.response.status} (must be 201 Created)`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Adding a Tepping test - Server response status is ${pm.response.code} ${pm.response.status} (must be 201 Created)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"    pm.test(`PASS: Adding a Tepping test - JSON schema is valid`, () => true);\r",
													"    console.log(`PASS: Adding a Tepping test - JSON schema is valid`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Adding a Tepping test - JSON schema is not valid`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Adding a Tepping test - schema is not valid`);\r",
													"}"
												],
												"type": "text/javascript",
												"id": "a93f2e3d-72db-4a85-b61b-336f4f3326bd"
											}
										}
									],
									"id": "213597e1-9d79-4c49-9cff-05c2e6723231",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\r\n  {\r\n    \"alias\": \"desc\",\r\n    \"type\": \"OPEN\",\r\n    \"timestamp\": \"2021-12-27T12:45:34+0000\",\r\n    \"tags\": [\"screen\"],\r\n    \"data\": {}\r\n  },\r\n  {\r\n    \"alias\": \"desc\",\r\n    \"type\": \"CLOSE\",\r\n    \"timestamp\": \"2021-12-27T12:45:35+0000\",\r\n    \"tags\": [\"screen\"],\r\n    \"data\": {}\r\n  },\r\n  {\r\n    \"alias\": \"face1\",\r\n    \"type\": \"OPEN\",\r\n    \"timestamp\": \"2021-12-27T12:45:35+0000\",\r\n    \"tags\": [\"screen\"],\r\n    \"data\": {}\r\n  },\r\n  {\r\n    \"alias\": \"hold1\",\r\n    \"type\": \"ACTION_BEGIN\",\r\n    \"timestamp\": \"2021-12-27T12:45:36+0000\",\r\n    \"tags\": [\"screen\"],\r\n    \"data\": {}\r\n  },\r\n  {\r\n    \"alias\": \"hold1\",\r\n    \"type\": \"ACTION_COMPLETE\",\r\n    \"timestamp\": \"2021-12-27T12:48:08+0000\",\r\n    \"tags\": [\"screen\",\"parameter\"],\r\n    \"data\": {\r\n      \"parameters\": [\r\n        {\r\n          \"name\": \"PulseRate\",\r\n          \"device\": \"null\",\r\n          \"timestamp\": \"2021-12-27T12:46:36+0000\",\r\n          \"value\": 66,\r\n          \"waveform\": null\r\n        },\r\n       \r\n        {\r\n          \"name\": \"Pressure\",\r\n          \"device\": \"null\",\r\n          \"timestamp\": \"2021-12-27T12:46:36+0000\",\r\n          \"value\": {\r\n              \"systolic\": 123,\r\n              \"diastolic\": 78\r\n          },\r\n          \"waveform\": null\r\n        },\r\n        {\r\n          \"name\": \"Height\",\r\n          \"device\": \"null\",\r\n          \"timestamp\": \"2021-12-27T12:46:36+0000\",\r\n          \"value\": 190,\r\n          \"waveform\": null\r\n        },\r\n        {\r\n          \"name\": \"Weight\",\r\n          \"device\": \"null\",\r\n          \"timestamp\": \"2021-12-27T12:46:36+0000\",\r\n          \"value\": 65,\r\n          \"waveform\": null\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  {\r\n    \"alias\": \"hold1\",\r\n    \"type\": \"CLOSE\",\r\n    \"timestamp\": \"2021-12-27T12:46:36+0000\",\r\n    \"tags\": [\"screen\"],\r\n    \"data\": {}\r\n  },\r\n\r\n  {\r\n    \"alias\": \"send\",\r\n    \"type\": \"OPEN\",\r\n    \"timestamp\": \"2021-12-27T12:48:08+0000\",\r\n    \"tags\": [\"screen\"],\r\n    \"data\": {}\r\n  },\r\n  {\r\n    \"alias\": \"send\",\r\n    \"type\": \"ACTION_COMPLETE\",\r\n    \"timestamp\": \"2021-12-27T12:48:08+0000\",\r\n    \"tags\": [\"screen\"],\r\n    \"data\": {}\r\n  },\r\n  {\r\n    \"alias\": \"send\",\r\n    \"type\": \"CLOSE\",\r\n    \"timestamp\": \"2021-12-27T12:48:08+0000\",\r\n    \"tags\": [\"screen\"],\r\n    \"data\": {}\r\n  }\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/test/{{id_test}}"
									},
									"response": []
								},
								{
									"name": "Obtain user Tepping test",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Testing obtaining of user Shtange R test...\");"
												],
												"type": "text/javascript",
												"id": "ebc014ab-13b5-4e68-a58c-1d48a80c966f"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    \"title\": \"Root Schema\",\r",
													"    \"required\": [\"data\", \"count\"],\r",
													"    \"properties\": {\r",
													"        \"data\": {\r",
													"            \"type\": \"array\",\r",
													"            \"items\": {\r",
													"                \"type\": \"object\",\r",
													"                \"required\": [\"value\", \"estimation\", \"type\", \"label\"],\r",
													"                \"properties\": {\r",
													"                    \"value\": {\r",
													"                        \"type\": \"number\"\r",
													"                    },\r",
													"                    \"estimation\": {\r",
													"                        \"type\": \"number\"\r",
													"                    },\r",
													"                    \"type\": {\r",
													"                        \"type\": \"string\"\r",
													"                    },\r",
													"                    \"label\": {\r",
													"                        \"type\": \"string\"\r",
													"                    }\r",
													"                }\r",
													"            }\r",
													"        },\r",
													"        \"count\": {\r",
													"            \"type\": \"number\"\r",
													"        }\r",
													"    }\r",
													"};\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
													"    pm.test(`PASS: Obtaining of user Tepping test - request time is: ${pm.response.responseTime} ms`, () => true);\r",
													"    console.log(`PASS: Obtaining of user Tepping test - Server response time is ${pm.response.responseTime} ms`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of user Tepping test - request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of user Tepping test - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.to.have.status(200));\r",
													"    pm.test(`PASS: Obtaining of user Tepping test - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
													"    console.log(`PASS: Obtaining of user Tepping test - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of user Tepping test - Server response status is: ${pm.response.code} ${pm.response.status} (must be 200 OK)`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of user Tepping test - Server response status is ${pm.response.code} ${pm.response.status} (must be 200 OK)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"    pm.test(`PASS: Obtaining of user Tepping test - JSON schema is valid`, () => true);\r",
													"    console.log(`PASS: Obtaining of user Tepping test - JSON schema is valid`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of user Tepping test - JSON schema is not valid`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of user Tepping test - schema is not valid`);\r",
													"}"
												],
												"type": "text/javascript",
												"id": "4b10a15d-63d0-406c-a9fa-8c7ab727b9f5"
											}
										}
									],
									"id": "97c83868-1ab3-4385-9d5e-01ca3cac04ec",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/test/{{id_test}}"
									},
									"response": []
								}
							],
							"id": "4b11237a-15a4-466a-90cd-ee8432787682",
							"description": "> Набор запросов для выполнения проверки по объявлению, выполнению и чтению созданных пользователем тестов"
						},
						{
							"name": "Read test",
							"item": [
								{
									"name": "Obtain user tests",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Testing obtaining of user tests...\");"
												],
												"type": "text/javascript",
												"id": "4751ddd2-3083-4903-a686-753c2b7dffbe"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"required\": [\"current_page\", \"data\", \"first_page_url\", \"from\", \"last_page\", \"last_page_url\", \"next_page_url\", \"path\", \"per_page\", \"prev_page_url\", \"to\", \"total\"],\r",
													"    \"properties\": {\r",
													"        \"current_page\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"data\": {\r",
													"            \"type\": \"array\",\r",
													"            \"items\": {\r",
													"                \"type\": \"object\",\r",
													"                \"required\": [\"id_test\", \"title\", \"result\", \"created_at\"],\r",
													"                \"properties\": {\r",
													"                    \"id_test\": {\r",
													"                        \"type\": \"number\"\r",
													"                    },\r",
													"                    \"title\": {\r",
													"                        \"type\": \"string\"\r",
													"                    },\r",
													"                    \"result\": {\r",
													"                        \"type\": \"object\",\r",
													"                        \"required\": [\"value\", \"estimation\", \"type\", \"label\"],\r",
													"                        \"properties\": {\r",
													"                            \"value\": {\r",
													"                                \"type\": \"number\"\r",
													"                            },\r",
													"                            \"estimation\": {\r",
													"                                \"type\": \"number\"\r",
													"                            },\r",
													"                            \"type\": {\r",
													"                                \"type\": \"string\"\r",
													"                            },\r",
													"                            \"label\": {\r",
													"                                \"type\": \"string\"\r",
													"                            }\r",
													"                        }\r",
													"                    },\r",
													"                    \"created_at\": {\r",
													"                        \"type\": \"string\"\r",
													"                    }\r",
													"                }\r",
													"            }\r",
													"        },\r",
													"        \"first_page_url\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"from\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"last_page\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"last_page_url\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"next_page_url\": {\r",
													"            \"type\": [\"string\", \"null\"]\r",
													"        },\r",
													"        \"path\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"per_page\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"prev_page_url\": {\r",
													"            \"type\": [\"string\", \"null\"]\r",
													"        },\r",
													"        \"to\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"total\": {\r",
													"            \"type\": \"number\"\r",
													"        }\r",
													"    }\r",
													"};\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
													"    pm.test(`PASS: Obtaining of user tests - request time is: ${pm.response.responseTime} ms`, () => true);\r",
													"    console.log(`PASS: Obtaining of user tests - Server response time is ${pm.response.responseTime} ms`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of user tests - request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of user tests - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.to.have.status(200));\r",
													"    pm.test(`PASS: Obtaining of user tests - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
													"    console.log(`PASS: Obtaining of user tests - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of user tests - Server response status is: ${pm.response.code} ${pm.response.status} (must be 200 OK)`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of user tests - Server response status is ${pm.response.code} ${pm.response.status} (must be 200 OK)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"    pm.test(`PASS: Obtaining of user tests - JSON schema is valid`, () => true);\r",
													"    console.log(`PASS: Obtaining of user tests - JSON schema is valid`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of user tests - JSON schema is not valid`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of user tests - schema is not valid`);\r",
													"}"
												],
												"type": "text/javascript",
												"id": "cde488d9-078f-426a-ac09-32411e23ea7d"
											}
										}
									],
									"id": "173a63e1-7d7b-4e11-a73f-760f72fe5d22",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/test",
										"description": "GET-запрос **Obtain user tests.**\n\nПолучает список всех выполненных пользователем тестов.\n\nПроизводит валидацию JSON-схемы."
									},
									"response": []
								},
								{
									"name": "Obtain last user tests",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Testing obtaining of last user tests...\");"
												],
												"type": "text/javascript",
												"id": "215e21d2-d12d-4639-aa24-67e398b32894"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"required\": [\"data\", \"count\"],\r",
													"    \"properties\": {\r",
													"        \"data\": {\r",
													"            \"type\": \"array\",\r",
													"            \"items\": {\r",
													"                \"type\": \"object\",\r",
													"                \"required\": [\"id_test\", \"title\", \"result\", \"created_at\"],\r",
													"                \"properties\": {\r",
													"                    \"id_test\": {\r",
													"                        \"type\": \"number\"\r",
													"                    },\r",
													"                    \"title\": {\r",
													"                        \"type\": \"string\"\r",
													"                    },\r",
													"                    \"result\": {\r",
													"                        \"type\": \"object\",\r",
													"                        \"required\": [\"value\", \"estimation\", \"type\", \"label\"],\r",
													"                        \"properties\": {\r",
													"                            \"value\": {\r",
													"                                \"type\": \"number\"\r",
													"                            },\r",
													"                            \"estimation\": {\r",
													"                                \"type\": \"number\"\r",
													"                            },\r",
													"                            \"type\": {\r",
													"                                \"type\": \"string\"\r",
													"                            },\r",
													"                            \"label\": {\r",
													"                                \"type\": \"string\"\r",
													"                            }\r",
													"                        }\r",
													"                    },\r",
													"                    \"created_at\": {\r",
													"                        \"type\": \"string\"\r",
													"                    }\r",
													"                }\r",
													"            }\r",
													"        },\r",
													"        \"count\": {\r",
													"            \"type\": \"number\"\r",
													"        }\r",
													"    }\r",
													"};\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
													"    pm.test(`PASS: Obtaining of last user tests - request time is: ${pm.response.responseTime} ms`, () => true);\r",
													"    console.log(`PASS: Obtaining of last user tests - Server response time is ${pm.response.responseTime} ms`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of last user tests - request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of last user tests - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.to.have.status(200));\r",
													"    pm.test(`PASS: Obtaining of last user tests - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
													"    console.log(`PASS: Obtaining of last user tests - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of last user tests - Server response status is: ${pm.response.code} ${pm.response.status} (must be 200 OK)`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of last user tests - Server response status is ${pm.response.code} ${pm.response.status} (must be 200 OK)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"    pm.test(`PASS: Obtaining of last user tests - JSON schema is valid`, () => true);\r",
													"    console.log(`PASS: Obtaining of last user tests - JSON schema is valid`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of last user tests - JSON schema is not valid`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of last user tests - schema is not valid`);\r",
													"}"
												],
												"type": "text/javascript",
												"id": "91003ad4-3e09-4454-9501-ac99d83823f6"
											}
										}
									],
									"id": "f170fb76-abc4-4c76-aed9-adb9ee38c23b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/test/last",
										"description": "GET-запрос **Obtain last user tests.**\n\nПолучает список последних выполненных пользователем тестов.\n\nПроизводит валидацию JSON-схемы."
									},
									"response": []
								}
							],
							"id": "22fe80fe-4465-432c-b295-abec1fab8a4c",
							"description": "> Набор запросов для получения списка пользовательских тестов\n\n**Obtain user tests** - запрос получения списка всех выполненных пользователем тестов.\n\n**Obtain last user tests** - запрос получения последних выполненных пользователем тестов."
						}
					],
					"id": "e50da8f7-bf4b-4dd5-8d3c-652b6808cb99",
					"description": "> Набор проверок пользовательских тестов\n\n**Read template** - набор запросов на чтение шаблонов тестов.\n\n**Create tests** - набор последовательных запросов, осуществляющих проверку создания, наполнения и чтения созданных тестов.\n\n**Read test** - набор запросов чтения созданных пользователем тестов."
				},
				{
					"name": "Subscriptions",
					"item": [
						{
							"name": "Obtain list of subscription plans",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"Testing obtaining list of subscription plans...\");"
										],
										"type": "text/javascript",
										"id": "29d759a7-efb9-484f-9a11-cc470f430397"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"required\": [\"data\", \"count\"],\r",
											"    \"properties\": {\r",
											"        \"data\": {\r",
											"            \"type\": \"array\",\r",
											"            \"items\": {\r",
											"                \"type\": \"object\",\r",
											"                \"required\": [\"id\", \"slug\", \"name\", \"description\", \"is_active\", \"price\", \"signup_fee\", \"currency\", \"trial_period\", \"trial_interval\", \"invoice_period\", \"invoice_interval\", \"grace_period\", \"grace_interval\", \"prorate_day\", \"prorate_period\", \"prorate_extend_due\", \"active_subscribers_limit\", \"sort_order\", \"created_at\", \"updated_at\", \"deleted_at\"],\r",
											"                \"properties\": {\r",
											"                    \"id\": {\r",
											"                        \"type\": \"number\"\r",
											"                    },\r",
											"                    \"slug\": {\r",
											"                        \"type\": \"string\"\r",
											"                    },\r",
											"                    \"name\": {\r",
											"                        \"type\": \"string\"\r",
											"                    },\r",
											"                    \"description\": {\r",
											"                        \"type\": \"string\"\r",
											"                    },\r",
											"                    \"is_active\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"price\": {\r",
											"                        \"type\": \"number\"\r",
											"                    },\r",
											"                    \"signup_fee\": {\r",
											"                        \"type\": \"number\"\r",
											"                    },\r",
											"                    \"currency\": {\r",
											"                        \"type\": \"string\"\r",
											"                    },\r",
											"                    \"trial_period\": {\r",
											"                        \"type\": \"number\"\r",
											"                    },\r",
											"                    \"trial_interval\": {\r",
											"                        \"type\": \"string\"\r",
											"                    },\r",
											"                    \"invoice_period\": {\r",
											"                        \"type\": \"number\"\r",
											"                    },\r",
											"                    \"invoice_interval\": {\r",
											"                        \"type\": \"string\"\r",
											"                    },\r",
											"                    \"grace_period\": {\r",
											"                        \"type\": \"number\"\r",
											"                    },\r",
											"                    \"grace_interval\": {\r",
											"                        \"type\": \"string\"\r",
											"                    },\r",
											"                    \"prorate_day\": {\r",
											"                        \"type\": \"null\" //change \r",
											"                    },\r",
											"                    \"prorate_period\": {\r",
											"                        \"type\": \"null\" //change \r",
											"                    },\r",
											"                    \"prorate_extend_due\": {\r",
											"                        \"type\": \"null\" //change \r",
											"                    },\r",
											"                    \"active_subscribers_limit\": {\r",
											"                        \"type\": \"null\" //change \r",
											"                    },\r",
											"                    \"sort_order\": {\r",
											"                        \"type\": \"number\"\r",
											"                    },\r",
											"                    \"created_at\": {\r",
											"                        \"type\": \"string\"\r",
											"                    },\r",
											"                    \"updated_at\": {\r",
											"                        \"type\": \"string\"\r",
											"                    },\r",
											"                    \"deleted_at\": {\r",
											"                        \"type\": \"null\"\r",
											"                    }\r",
											"                }\r",
											"            }\r",
											"        },\r",
											"        \"count\": {\r",
											"            \"type\": \"number\"\r",
											"        }\r",
											"    },\r",
											"        \"count\": 3\r",
											"};\r",
											"\r",
											"try {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
											"    pm.test(`PASS: Obtaining list of subscription plans - request time is: ${pm.response.responseTime} ms`, () => true);\r",
											"    console.log(`PASS: Obtaining list of subscription plans - Server response time is ${pm.response.responseTime} ms`);\r",
											"}\r",
											"catch(e) {\r",
											"    pm.test(`FAIL: Obtaining list of subscription plans - request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
											"    console.log(`FAIL: Obtaining list of subscription plans - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
											"}\r",
											"\r",
											"try {\r",
											"    pm.expect(pm.response.to.have.status(200));\r",
											"    pm.test(`PASS: Obtaining list of subscription plans - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
											"    console.log(`PASS: Obtaining list of subscription plans - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
											"}\r",
											"catch(e) {\r",
											"    pm.test(`FAIL: Obtaining list of subscription plans - Server response status is: ${pm.response.code} ${pm.response.status} (must be 200 OK)`, () => {throw new Error(e.message)});\r",
											"    console.log(`FAIL: Obtaining list of subscription plans - Server response status is ${pm.response.code} ${pm.response.status} (must be 200 OK)`);\r",
											"}\r",
											"\r",
											"try {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"    pm.test(`PASS: Obtaining list of subscription plans - JSON schema is valid`, () => true);\r",
											"    console.log(`PASS: Obtaining list of subscription plans - JSON schema is valid`);\r",
											"}\r",
											"catch(e) {\r",
											"    pm.test(`FAIL: Obtaining list of subscription plans - JSON schema is not valid`, () => {throw new Error(e.message)});\r",
											"    console.log(`FAIL: Obtaining list of subscription plans - schema is not valid`);\r",
											"}"
										],
										"type": "text/javascript",
										"id": "a1486335-5b2b-4cee-874a-307318b5be5e"
									}
								}
							],
							"id": "a47f6468-5294-4f04-96d9-daed66f3fdd5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/plan",
								"description": "GET-запрос **Obtain list of subscription plans.**\n\nПолучает список всех подписочных планов.\n\nПроизводит валидацию JSON-схемы."
							},
							"response": []
						},
						{
							"name": "Obtain a specific subscription plan",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"Testing obtaining of specific subscription plan...\");"
										],
										"type": "text/javascript",
										"id": "25f49ba7-29e4-4b99-bef9-b88f297f0e05"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"required\": [\"id\", \"slug\", \"name\", \"description\", \"is_active\", \"price\", \"signup_fee\", \"currency\", \"trial_period\", \"trial_interval\", \"invoice_period\", \"invoice_interval\", \"grace_period\", \"grace_interval\", \"prorate_day\", \"prorate_period\", \"prorate_extend_due\", \"active_subscribers_limit\", \"sort_order\", \"created_at\", \"updated_at\", \"deleted_at\", \"features\"],\r",
											"    \"properties\": {\r",
											"        \"id\": {\r",
											"            \"type\": \"number\"\r",
											"        },\r",
											"        \"slug\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"name\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"description\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"is_active\": {\r",
											"            \"type\": \"boolean\"\r",
											"        },\r",
											"        \"price\": {\r",
											"            \"type\": \"number\"\r",
											"        },\r",
											"        \"signup_fee\": {\r",
											"            \"type\": \"number\"\r",
											"        },\r",
											"        \"currency\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"trial_period\": {\r",
											"            \"type\": \"number\"\r",
											"        },\r",
											"        \"trial_interval\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"invoice_period\": {\r",
											"            \"type\": \"number\"\r",
											"        },\r",
											"        \"invoice_interval\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"grace_period\": {\r",
											"            \"type\": \"number\"\r",
											"        },\r",
											"        \"grace_interval\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"prorate_day\": {\r",
											"            \"type\": \"null\" //change\r",
											"        },\r",
											"        \"prorate_period\": {\r",
											"            \"type\": \"null\" //change\r",
											"        },\r",
											"        \"prorate_extend_due\": {\r",
											"            \"type\": \"null\" //change\r",
											"        },\r",
											"        \"active_subscribers_limit\": {\r",
											"            \"type\": \"null\" //change\r",
											"        },\r",
											"        \"sort_order\": {\r",
											"            \"type\": \"number\"\r",
											"        },\r",
											"        \"created_at\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"updated_at\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"deleted_at\": {\r",
											"            \"type\": \"null\"\r",
											"        },\r",
											"        \"features\": {\r",
											"            \"type\": \"array\",\r",
											"            \"items\": {\r",
											"                \"type\": \"object\",\r",
											"                \"required\": [\"id\", \"plan_id\", \"slug\", \"name\", \"description\", \"value\", \"resettable_period\", \"resettable_interval\",  \"sort_order\", \"created_at\", \"updated_at\",  \"deleted_at\"],\r",
											"                \"properties\": {\r",
											"                    \"id\": {\r",
											"                        \"type\": \"number\"\r",
											"                    },\r",
											"                    \"plan_id\": {\r",
											"                        \"type\": \"number\"\r",
											"                    },\r",
											"                    \"slug\": {\r",
											"                        \"type\": \"string\"\r",
											"                    },\r",
											"                    \"name\": {\r",
											"                        \"type\": \"string\"\r",
											"                    },\r",
											"                    \"description\": {\r",
											"                        \"type\": \"null\" //change\r",
											"                    },\r",
											"                    \"value\": {\r",
											"                        \"type\": \"string\"\r",
											"                    },\r",
											"                    \"resettable_period\": {\r",
											"                        \"type\": \"number\"\r",
											"                    },\r",
											"                    \"resettable_interval\": {\r",
											"                        \"type\": \"string\"\r",
											"                    },\r",
											"                    \"sort_order\": {\r",
											"                        \"type\": \"number\"\r",
											"                    },\r",
											"                    \"created_at\": {\r",
											"                        \"type\": \"string\"\r",
											"                    },\r",
											"                    \"updated_at\": {\r",
											"                        \"type\": \"string\"\r",
											"                    },\r",
											"                    \"deleted_at\": {\r",
											"                        \"type\": \"null\"\r",
											"                    }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"};\r",
											"\r",
											"try {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
											"    pm.test(`PASS: Obtaining specific subscription plan - request time is: ${pm.response.responseTime} ms`, () => true);\r",
											"    console.log(`PASS: Obtaining specific subscription plan - Server response time is ${pm.response.responseTime} ms`);\r",
											"}\r",
											"catch(e) {\r",
											"    pm.test(`FAIL: Obtaining specific subscription plan - request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
											"    console.log(`FAIL: Obtaining specific subscription plan - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
											"}\r",
											"\r",
											"try {\r",
											"    pm.expect(pm.response.to.have.status(200));\r",
											"    pm.test(`PASS: Obtaining specific subscription plan - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
											"    console.log(`PASS: Obtaining specific subscription plan - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
											"}\r",
											"catch(e) {\r",
											"    pm.test(`FAIL: Obtaining specific subscription plan - Server response status is: ${pm.response.code} ${pm.response.status} (must be 200 OK)`, () => {throw new Error(e.message)});\r",
											"    console.log(`FAIL: Obtaining specific subscription plan - Server response status is ${pm.response.code} ${pm.response.status} (must be 200 OK)`);\r",
											"}\r",
											"\r",
											"try {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"    pm.test(`PASS: Obtaining specific subscription plan - JSON schema is valid`, () => true);\r",
											"    console.log(`PASS: Obtaining specific subscription plan - JSON schema is valid`);\r",
											"}\r",
											"catch(e) {\r",
											"    pm.test(`FAIL: Obtaining specific subscription plan - JSON schema is not valid`, () => {throw new Error(e.message)});\r",
											"    console.log(`FAIL: Obtaining specific subscription plan - schema is not valid`);\r",
											"}"
										],
										"type": "text/javascript",
										"id": "b49992ed-a3ca-4b1a-8a72-34c5fc4cb8a6"
									}
								}
							],
							"id": "1649c3ba-6e8e-439d-8887-ec080968177e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/plan/{{subscription}}",
								"description": "GET-запрос **Obtain a specific subscription plan.**\n\nПолучает информацию о конкретном подписочном плане по его id.\n\nПроизводит валидацию JSON-схемы."
							},
							"response": []
						}
					],
					"id": "c1bf1de1-0862-41d0-8549-feb446c56656",
					"description": "> Набор тестов планов подписок\n\n**Obtain list of subscription plans** - запрос получения списка подписочных планов.\n\n**Obtain a specific subscription plan** - запрос получения конкретного подписочного плана по его id.\n\n**Update subscription plan** - обновление информации о подписочном плане."
				},
				{
					"name": "Help Q&A",
					"item": [
						{
							"name": "Read help",
							"item": [
								{
									"name": "Obtain help topics list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"required\": [\"helps\"],\r",
													"    \"properties\": {\r",
													"        \"helps\": {\r",
													"            \"type\": \"array\",\r",
													"            \"items\": {\r",
													"                \"type\": \"object\",\r",
													"                \"required\": [\"id\", \"name\"],\r",
													"                \"properties\": {\r",
													"                    \"id\": {\r",
													"                        \"type\": \"number\",\r",
													"                    },\r",
													"                    \"name\": {\r",
													"                        \"type\": \"string\",\r",
													"                    }\r",
													"                }\r",
													"\t\t\t}\r",
													"        }\r",
													"    },\r",
													"};\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
													"    pm.test(`PASS: Obtaining of help topics list - request time is: ${pm.response.responseTime} ms`, () => true);\r",
													"    console.log(`PASS: Obtaining of help topics list - Server response time is ${pm.response.responseTime} ms`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of help topics list - request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of help topics list - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.to.have.status(200));\r",
													"    pm.test(`PASS: Obtaining of help topics list - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
													"    console.log(`PASS: Obtaining of help topics list - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of help topics list - Server response status is: ${pm.response.code} ${pm.response.status} (must be 200 OK)`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of help topics list - Server response status is ${pm.response.code} ${pm.response.status} (must be 200 OK)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"    pm.test(`PASS: Obtaining of help topics list - JSON schema is valid`, () => true);\r",
													"    console.log(`PASS: Obtaining of help topics list - JSON schema is valid`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining of help topics list - JSON schema is not valid`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining of help topics list - schema is not valid`);\r",
													"}"
												],
												"type": "text/javascript",
												"id": "4b77bed5-4b34-4631-be97-d2e431aa3226"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Testing obtaining of help topics list...\");"
												],
												"type": "text/javascript",
												"id": "31e2780e-8bb3-4d7e-85e3-37e1b0d0be46"
											}
										}
									],
									"id": "1a5b6e26-8de4-4597-8c9d-f5ed96bda817",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/help",
										"description": "GET-запрос **Obtain help topics list**.\n\nОсуществляет получение списка доступных справочных тем."
									},
									"response": []
								},
								{
									"name": "Obtain details of help topic",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"required\": [\"id\", \"detail\", \"name\"],\r",
													"    \"properties\": {\r",
													"        \"id\": {\r",
													"            \"type\": \"number\"\r",
													"        },\r",
													"        \"detail\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"name\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    }\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));\r",
													"    pm.test(`PASS: Obtaining details of help topic - request time is: ${pm.response.responseTime} ms`, () => true);\r",
													"    console.log(`PASS: Obtaining details of help topic - Server response time is ${pm.response.responseTime} ms`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining details of help topic - request time is: ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining details of help topic - Server response time is ${pm.response.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.expect(pm.response.to.have.status(200));\r",
													"    pm.test(`PASS: Obtaining details of help topic - Server response status is: ${pm.response.code} ${pm.response.status}`, () => true);\r",
													"    console.log(`PASS: Obtaining details of help topic - Server response status is ${pm.response.code} ${pm.response.status}`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining details of help topic - Server response status is: ${pm.response.code} ${pm.response.status} (must be 200 OK)`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining details of help topic - Server response status is ${pm.response.code} ${pm.response.status} (must be 200 OK)`);\r",
													"}\r",
													"\r",
													"try {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"    pm.test(`PASS: Obtaining details of help topic - JSON schema is valid`, () => true);\r",
													"    console.log(`PASS: Obtaining details of help topic - JSON schema is valid`);\r",
													"}\r",
													"catch(e) {\r",
													"    pm.test(`FAIL: Obtaining details of help topic - JSON schema is not valid`, () => {throw new Error(e.message)});\r",
													"    console.log(`FAIL: Obtaining details of help topic - schema is not valid`);\r",
													"}"
												],
												"type": "text/javascript",
												"id": "fc8cb415-bfa2-4ac0-9020-a069ab42eef1"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Testing obtaining details of help topic...\");"
												],
												"type": "text/javascript",
												"id": "4a7b56e5-f662-4914-a6ae-ffcb2c1e335a"
											}
										}
									],
									"id": "92f57391-748b-4613-b587-1a82ec5a0365",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/help/1?lang=ru",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"help",
												"1"
											],
											"query": [
												{
													"key": "lang",
													"value": "ru"
												}
											]
										},
										"description": "GET-запрос **Obtain details of help topic**.\n\nОсуществляет получение детальной справки по интересующей теме."
									},
									"response": []
								}
							],
							"id": "b33c3101-1644-4c81-89cd-7f32682ac9fe",
							"description": "> Набор запросов для получения списка справочной информации системы.\n\n**Obtain help topics list** - запрос получения списка справочных тем.\n\n**Obtain details of help topic** - запрос получения детальной справки по определенной теме.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "f3fbd274-bea3-4bec-9405-dfa1d1e19907"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "64590d51-6bbf-4754-b374-5c9bf5488c29"
									}
								}
							]
						}
					],
					"id": "54db7fba-af8d-4493-b96e-3458f4ea1d3d",
					"description": "> Набор тестов справочной информации\n\n**Read help** - содержит набор запросов для получения списка справочной информации системы.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "d0ea80d9-1a6b-4016-be45-d0cab91a1a6a"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "3993f66b-7d51-446c-a272-3cbd0555ca7a"
							}
						}
					]
				}
			],
			"id": "9660cecf-286a-46e6-905b-2cff49b69555",
			"description": "> Коллекция тестов API *FlowVit.Mobile* содержит несколько групп тестов, включая тесты сценариев.\n\n*   **Authorization** - набор запросов, позволяющих произвести тестирование авторизации.\n*   **User profile** - набор запросов, позволяющих произвести тестирование профиля пользователя.\n*   **Metrics** - набор запросов, позволяющих произвести тестирование работы с метриками пользователя.\n*   **Reports** - набор запросов, позволяющих произвести тестирование работы с отчетами пользователя.\n*   **Tests** - набор запросов, позволяющих произвести проверку работы с тестами.\n*   **Subscriptions** - набор запросов, позволяющих произвести тестирование работы с планами подписок.\n*   **Help Q&A** - набор запросов, позволяющих произвести тестирование работы со справкой.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "7b0ea164-a5f0-477c-a8af-778c7ff8bf47"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "a8c7bee2-94f8-46b5-ad31-59472c9fac21"
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{token_access}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "83d75bb8-526b-4eb8-9fb6-de222260754f",
				"type": "text/javascript",
				"exec": [
					"let protocol = pm.collectionVariables.get(\"protocol\");",
					"let endpoint = pm.collectionVariables.get(\"endpoint\");",
					"let port = pm.collectionVariables.get(\"port\");",
					"let version = pm.collectionVariables.get(\"version\");",
					"let phone = pm.collectionVariables.get(\"phone\");",
					"let code = pm.collectionVariables.get(\"code\");",
					"",
					"pm.sendRequest({ //Confirm OTP",
					"    url: `https://${endpoint}${port}/${version}/auth/phone/?phone=${phone}&code=${code}`,",
					"    method: 'PUT',",
					"    header: {",
					"        'Accept': 'application/json',",
					"        'Content-Type': 'application/json'",
					"    }",
					"}, function (err, res) {",
					"    pm.collectionVariables.set(\"token_access\", res.json().access_token);",
					"",
					"    const schema = {",
					"        \"type\": \"object\",",
					"        \"required\": [\"token_access\", \"expires_in\"],",
					"        \"properties\": {",
					"            \"token_access\": {",
					"                \"type\": \"string\"",
					"            },",
					"            \"expires_in\": {",
					"                \"type\": \"number\"",
					"            }",
					"        }",
					"    };",
					"",
					"    function parseJWT(token, part) {",
					"        var base64URL = token.split('.')[part];",
					"        var words = CryptoJS.enc.Base64.parse(base64URL);",
					"        var jsonPayload = CryptoJS.enc.Utf8.stringify(words);",
					"        return JSON.parse(jsonPayload);",
					"    };",
					"",
					"    var JWTInfo = {};",
					"    JWTInfo.size = res.json().access_token.length;",
					"    JWTInfo.header = parseJWT(res.json().access_token, 0);",
					"    JWTInfo.payload = parseJWT(res.json().access_token, 1);",
					"    JWTInfo.signature = res.json().access_token.split('.')[2];",
					"    JWTInfo.expires = ((JWTInfo.payload.exp-Date.now().valueOf()/1000)/60).toFixed(1);",
					"    console.log(JWTInfo);",
					"",
					"    try {",
					"        pm.expect(res.responseTime).to.be.below(Number(pm.collectionVariables.get(\"response_time\")));",
					"        pm.test(`PASS: Confirm OTP - Request time is: ${res.responseTime} ms`, () => true);",
					"        console.log(`PASS: Confirm OTP - Server response time is ${res.responseTime} ms`);",
					"    }",
					"    catch(e) {",
					"        pm.test(`FAIL: Confirm OTP - Request time is: ${res.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))})`, () => {throw new Error(e.message)});",
					"        console.log(`FAIL: Confirm OTP - Server response time is ${res.responseTime} ms (must be under ${Number(pm.collectionVariables.get(\"response_time\"))} ms)`);",
					"    }",
					"",
					"    try {",
					"        pm.expect(res.status == 200);",
					"        pm.test(`PASS: Confirm OTP - Server response status is: ${res.code} ${res.status}`, () => true);",
					"        console.log(`PASS: Confirm OTP - Server response status is ${res.code} ${res.status}`);",
					"    }",
					"    catch(e) {",
					"        pm.test(`FAIL: Confirm OTP - Server response status is: ${res.code} ${res.status} (must be 200 OK)`, () => {throw new Error(e.message)});",
					"        console.log(`FAIL: Confirm OTP - Server response status is ${res.code} ${res.status} (must be 200 OK)`);",
					"    }",
					"",
					"    try {",
					"        res.json(schema);",
					"        pm.test(`PASS: Confirm OTP - JSON schema is valid`, () => true);",
					"        console.log(`PASS: Confirm OTP - JSON schema is valid`);",
					"    }",
					"    catch(e) {",
					"        pm.test(`FAIL: Confirm OTP - JSON schema is not valid`, () => {throw new Error(e.message)});",
					"        console.log(`FAIL: Confirm OTP - schema is not valid`);",
					"    }",
					"",
					"    try {",
					"        pm.expect(JWTInfo.payload.plan).to.eql(Number(pm.collectionVariables.get(\"subscription\")));",
					"        pm.test(`PASS: Confirm OTP - Subscription plan is valid`, () => true);",
					"        console.log(`PASS: Confirm OTP - Subscription plan is valid`);",
					"    }",
					"    catch(e) {",
					"        pm.test(`FAIL: Confirm OTP - Subscription plan is invalid (Must be \"${JWTInfo.payload.plan}\")`, () => {throw new Error(e.message)});",
					"        console.log(`FAIL: Confirm OTP - Subscription plan is invalid (Must be \"${JWTInfo.payload.plan}\")`);",
					"    }",
					"",
					"});",
					"",
					"let token_test = pm.collectionVariables.get(\"token_access\");",
					"console.log(token_test);",
					"console.log(\"Token generated!\");"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "dadbdede-1c46-4616-9da1-23d165b9e551",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "f68ddaaf-71e3-4987-ac6f-394d6822cddf",
			"key": "baseURL",
			"value": "{{protocol}}//{{endpoint}}{{port}}/{{version}}",
			"type": "string"
		},
		{
			"id": "60e21469-6d2e-480e-8313-6bb759f3029f",
			"key": "response_time",
			"value": "5000",
			"type": "string"
		},
		{
			"id": "7efbb7b7-9839-48fd-a24a-247222577865",
			"key": "report_id",
			"value": "8",
			"type": "string"
		},
		{
			"id": "33210c82-8290-4c47-9a62-b83865c00340",
			"key": "filepath",
			"value": "",
			"type": "string"
		},
		{
			"id": "2c69a22f-6288-4a21-9855-f6bd5726414e",
			"key": "ava",
			"value": "photo2.jpg",
			"type": "string"
		},
		{
			"id": "6c1ab0e6-ac85-4e2e-83bf-748e63e6f736",
			"key": "hashB",
			"value": "c6f5239221866bb37e0c42264a11aee8",
			"type": "string"
		},
		{
			"id": "47a08ffc-eb44-4d39-b467-abc9342a398a",
			"key": "start",
			"value": ""
		},
		{
			"id": "a1b40990-c96f-42b7-89e9-21dd2394167e",
			"key": "end",
			"value": ""
		},
		{
			"id": "2c7b180b-441a-4f97-b2d2-8b6337cc66b7",
			"key": "currData",
			"value": ""
		},
		{
			"id": "189b3a1e-b2ee-4444-8415-4795be339883",
			"key": "profileData",
			"value": ""
		},
		{
			"id": "28bd8742-2348-4f15-a081-e267ca684937",
			"key": "currObtainedData",
			"value": ""
		},
		{
			"id": "d3245d01-e720-4d04-a099-a94f89983334",
			"key": "obtainedData",
			"value": ""
		},
		{
			"id": "cc2f7f1c-a4db-467f-a0c7-6a07a176850a",
			"key": "phone",
			"value": "79378839459",
			"type": "string"
		},
		{
			"id": "d7ed7019-6d1a-46bf-9394-75b201381553",
			"key": "code",
			"value": "1111",
			"type": "string"
		},
		{
			"id": "8b6bd380-f9b3-4bb3-9e07-e394d2e29540",
			"key": "token_access",
			"value": ""
		},
		{
			"id": "7a115226-b09b-4f6b-b00e-dc73a153a58f",
			"key": "port",
			"value": "",
			"type": "string"
		},
		{
			"id": "25a96643-fe63-4676-8afb-7c7a4cc56285",
			"key": "protocol",
			"value": "https:",
			"type": "string"
		},
		{
			"id": "549dcd44-0950-4741-9426-fcdbdb9e9a6b",
			"key": "version",
			"value": "api/v2",
			"type": "string"
		},
		{
			"id": "d57dd451-b6e5-4d44-b994-0e5ca826a375",
			"key": "endpoint",
			"value": "api-tests.galen-dev.site",
			"type": "string"
		},
		{
			"id": "62d82b04-cac7-41e0-8b59-a6f4c7eaedd6",
			"key": "avatar",
			"value": "",
			"type": "string"
		},
		{
			"id": "5eaa1284-e90c-4bb4-963c-9156e960abeb",
			"key": "id_test",
			"value": "",
			"type": "string"
		},
		{
			"id": "eb4b52a9-51bd-4b58-864c-03c5cf79fdf9",
			"key": "currdatetime",
			"value": ""
		},
		{
			"id": "68c31c95-c3d7-4e6e-b35b-6964ea84183a",
			"key": "subscription",
			"value": "1",
			"type": "string"
		}
	]
}